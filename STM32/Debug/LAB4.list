
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ab8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002bc4  08002bc4  00012bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002be8  08002be8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002be8  08002be8  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002be8  08002be8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002be8  08002be8  00012be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bec  08002bec  00012bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000006c  08002c5c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08002c5c  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b03f  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa8  00000000  00000000  0002b0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  0002d080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  0002db98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018698  00000000  00000000  0002e570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9a2  00000000  00000000  00046c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086746  00000000  00000000  000545aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dacf0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ab8  00000000  00000000  000dad44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bac 	.word	0x08002bac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08002bac 	.word	0x08002bac

0800014c <SCH_Init>:
#include "Sche.h"

SCH_Task tasks[SCH_TASKNUMBER];

//hàm khởi tạo
void SCH_Init(void) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e037      	b.n	80001c8 <SCH_Init+0x7c>
        tasks[i].pTask = 0;
 8000158:	79fa      	ldrb	r2, [r7, #7]
 800015a:	4920      	ldr	r1, [pc, #128]	; (80001dc <SCH_Init+0x90>)
 800015c:	4613      	mov	r3, r2
 800015e:	009b      	lsls	r3, r3, #2
 8000160:	4413      	add	r3, r2
 8000162:	009b      	lsls	r3, r3, #2
 8000164:	440b      	add	r3, r1
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
        tasks[i].id = SCH_TASKNUMBER - i - 1;//taskid theo thứ tự giảm dần
 800016a:	79fa      	ldrb	r2, [r7, #7]
 800016c:	79fb      	ldrb	r3, [r7, #7]
 800016e:	f1c3 0307 	rsb	r3, r3, #7
 8000172:	b2d8      	uxtb	r0, r3
 8000174:	4919      	ldr	r1, [pc, #100]	; (80001dc <SCH_Init+0x90>)
 8000176:	4613      	mov	r3, r2
 8000178:	009b      	lsls	r3, r3, #2
 800017a:	4413      	add	r3, r2
 800017c:	009b      	lsls	r3, r3, #2
 800017e:	440b      	add	r3, r1
 8000180:	3304      	adds	r3, #4
 8000182:	4602      	mov	r2, r0
 8000184:	701a      	strb	r2, [r3, #0]
        tasks[i].delay = 0;
 8000186:	79fa      	ldrb	r2, [r7, #7]
 8000188:	4914      	ldr	r1, [pc, #80]	; (80001dc <SCH_Init+0x90>)
 800018a:	4613      	mov	r3, r2
 800018c:	009b      	lsls	r3, r3, #2
 800018e:	4413      	add	r3, r2
 8000190:	009b      	lsls	r3, r3, #2
 8000192:	440b      	add	r3, r1
 8000194:	3308      	adds	r3, #8
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
        tasks[i].period = 0;
 800019a:	79fa      	ldrb	r2, [r7, #7]
 800019c:	490f      	ldr	r1, [pc, #60]	; (80001dc <SCH_Init+0x90>)
 800019e:	4613      	mov	r3, r2
 80001a0:	009b      	lsls	r3, r3, #2
 80001a2:	4413      	add	r3, r2
 80001a4:	009b      	lsls	r3, r3, #2
 80001a6:	440b      	add	r3, r1
 80001a8:	330c      	adds	r3, #12
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
        tasks[i].run_me = 0;
 80001ae:	79fa      	ldrb	r2, [r7, #7]
 80001b0:	490a      	ldr	r1, [pc, #40]	; (80001dc <SCH_Init+0x90>)
 80001b2:	4613      	mov	r3, r2
 80001b4:	009b      	lsls	r3, r3, #2
 80001b6:	4413      	add	r3, r2
 80001b8:	009b      	lsls	r3, r3, #2
 80001ba:	440b      	add	r3, r1
 80001bc:	3310      	adds	r3, #16
 80001be:	2200      	movs	r2, #0
 80001c0:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	3301      	adds	r3, #1
 80001c6:	71fb      	strb	r3, [r7, #7]
 80001c8:	79fb      	ldrb	r3, [r7, #7]
 80001ca:	2b07      	cmp	r3, #7
 80001cc:	d9c4      	bls.n	8000158 <SCH_Init+0xc>
    }
}
 80001ce:	bf00      	nop
 80001d0:	bf00      	nop
 80001d2:	370c      	adds	r7, #12
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	200000c4 	.word	0x200000c4

080001e0 <SCH_Update>:

void SCH_Update(void) {
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
    if (tasks[0].pTask == 0) return;
 80001e4:	4b10      	ldr	r3, [pc, #64]	; (8000228 <SCH_Update+0x48>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d018      	beq.n	800021e <SCH_Update+0x3e>
	if (tasks[0].delay > 0) {
 80001ec:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <SCH_Update+0x48>)
 80001ee:	689b      	ldr	r3, [r3, #8]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d00c      	beq.n	800020e <SCH_Update+0x2e>
		if (tasks[0].delay > SCH_TIMERTICK) {
 80001f4:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <SCH_Update+0x48>)
 80001f6:	689b      	ldr	r3, [r3, #8]
 80001f8:	2b0a      	cmp	r3, #10
 80001fa:	d905      	bls.n	8000208 <SCH_Update+0x28>
			tasks[0].delay -= SCH_TIMERTICK;
 80001fc:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <SCH_Update+0x48>)
 80001fe:	689b      	ldr	r3, [r3, #8]
 8000200:	3b0a      	subs	r3, #10
 8000202:	4a09      	ldr	r2, [pc, #36]	; (8000228 <SCH_Update+0x48>)
 8000204:	6093      	str	r3, [r2, #8]
 8000206:	e002      	b.n	800020e <SCH_Update+0x2e>
		}
		else {
			tasks[0].delay = 0;
 8000208:	4b07      	ldr	r3, [pc, #28]	; (8000228 <SCH_Update+0x48>)
 800020a:	2200      	movs	r2, #0
 800020c:	609a      	str	r2, [r3, #8]
		}
	}
	if (tasks[0].delay == 0) {
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <SCH_Update+0x48>)
 8000210:	689b      	ldr	r3, [r3, #8]
 8000212:	2b00      	cmp	r3, #0
 8000214:	d104      	bne.n	8000220 <SCH_Update+0x40>
		tasks[0].run_me = 1;
 8000216:	4b04      	ldr	r3, [pc, #16]	; (8000228 <SCH_Update+0x48>)
 8000218:	2201      	movs	r2, #1
 800021a:	741a      	strb	r2, [r3, #16]
 800021c:	e000      	b.n	8000220 <SCH_Update+0x40>
    if (tasks[0].pTask == 0) return;
 800021e:	bf00      	nop
	}
}
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	200000c4 	.word	0x200000c4

0800022c <SCH_Dispatch>:

void SCH_Dispatch(void) {
 800022c:	b5b0      	push	{r4, r5, r7, lr}
 800022e:	b086      	sub	sp, #24
 8000230:	af00      	add	r7, sp, #0
	if (tasks[0].pTask == 0 || tasks[0].run_me == 0) return; //check vị trí đầu tiên có trống hay đang thực hiện không
 8000232:	4b14      	ldr	r3, [pc, #80]	; (8000284 <SCH_Dispatch+0x58>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d01f      	beq.n	800027a <SCH_Dispatch+0x4e>
 800023a:	4b12      	ldr	r3, [pc, #72]	; (8000284 <SCH_Dispatch+0x58>)
 800023c:	7c1b      	ldrb	r3, [r3, #16]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d01b      	beq.n	800027a <SCH_Dispatch+0x4e>
	(*tasks[0].pTask)();
 8000242:	4b10      	ldr	r3, [pc, #64]	; (8000284 <SCH_Dispatch+0x58>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4798      	blx	r3
	tasks[0].run_me = 0; //đặt lại run_me khi đã thực hiện xong
 8000248:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <SCH_Dispatch+0x58>)
 800024a:	2200      	movs	r2, #0
 800024c:	741a      	strb	r2, [r3, #16]
	SCH_Task newTask = tasks[0]; //lưu trữ thông tin task[0] vào biến tạm
 800024e:	4b0d      	ldr	r3, [pc, #52]	; (8000284 <SCH_Dispatch+0x58>)
 8000250:	1d3c      	adds	r4, r7, #4
 8000252:	461d      	mov	r5, r3
 8000254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000258:	682b      	ldr	r3, [r5, #0]
 800025a:	6023      	str	r3, [r4, #0]
	SCH_DeleteTask(tasks[0].id); //xóa task
 800025c:	4b09      	ldr	r3, [pc, #36]	; (8000284 <SCH_Dispatch+0x58>)
 800025e:	791b      	ldrb	r3, [r3, #4]
 8000260:	4618      	mov	r0, r3
 8000262:	f000 f917 	bl	8000494 <SCH_DeleteTask>
	if (newTask.period > 0) {
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d007      	beq.n	800027c <SCH_Dispatch+0x50>
		SCH_Add_Task(newTask.pTask, newTask.period, newTask.period); //cập nhật lại nếu cần dùng
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	6939      	ldr	r1, [r7, #16]
 8000270:	693a      	ldr	r2, [r7, #16]
 8000272:	4618      	mov	r0, r3
 8000274:	f000 f808 	bl	8000288 <SCH_Add_Task>
 8000278:	e000      	b.n	800027c <SCH_Dispatch+0x50>
	if (tasks[0].pTask == 0 || tasks[0].run_me == 0) return; //check vị trí đầu tiên có trống hay đang thực hiện không
 800027a:	bf00      	nop
		// delay = period
	}
}
 800027c:	3718      	adds	r7, #24
 800027e:	46bd      	mov	sp, r7
 8000280:	bdb0      	pop	{r4, r5, r7, pc}
 8000282:	bf00      	nop
 8000284:	200000c4 	.word	0x200000c4

08000288 <SCH_Add_Task>:

uint8_t SCH_Add_Task(void (*pTask)(void), uint32_t delay, uint32_t period) {
 8000288:	b4b0      	push	{r4, r5, r7}
 800028a:	b089      	sub	sp, #36	; 0x24
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]
    if (tasks[SCH_TASKNUMBER - 1].pTask != 0) return SCH_TASKNUMBER; //check danh sách đầy
 8000294:	4b7e      	ldr	r3, [pc, #504]	; (8000490 <SCH_Add_Task+0x208>)
 8000296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SCH_Add_Task+0x1a>
 800029e:	2308      	movs	r3, #8
 80002a0:	e0f1      	b.n	8000486 <SCH_Add_Task+0x1fe>
    uint8_t currentID = tasks[SCH_TASKNUMBER - 1].id; //lấy id task cuối
 80002a2:	4b7b      	ldr	r3, [pc, #492]	; (8000490 <SCH_Add_Task+0x208>)
 80002a4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80002a8:	767b      	strb	r3, [r7, #25]
    uint32_t currentDelay = 0; //biến tính tổng delay từ task đầu đến hiện tại
 80002aa:	2300      	movs	r3, #0
 80002ac:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80002ae:	2300      	movs	r3, #0
 80002b0:	76fb      	strb	r3, [r7, #27]
 80002b2:	e0e3      	b.n	800047c <SCH_Add_Task+0x1f4>
        currentDelay += tasks[i].delay;
 80002b4:	7efa      	ldrb	r2, [r7, #27]
 80002b6:	4976      	ldr	r1, [pc, #472]	; (8000490 <SCH_Add_Task+0x208>)
 80002b8:	4613      	mov	r3, r2
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	4413      	add	r3, r2
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	440b      	add	r3, r1
 80002c2:	3308      	adds	r3, #8
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	69fa      	ldr	r2, [r7, #28]
 80002c8:	4413      	add	r3, r2
 80002ca:	61fb      	str	r3, [r7, #28]
        if (currentDelay > delay || tasks[i].pTask == 0) {
 80002cc:	69fa      	ldr	r2, [r7, #28]
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	d80a      	bhi.n	80002ea <SCH_Add_Task+0x62>
 80002d4:	7efa      	ldrb	r2, [r7, #27]
 80002d6:	496e      	ldr	r1, [pc, #440]	; (8000490 <SCH_Add_Task+0x208>)
 80002d8:	4613      	mov	r3, r2
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	4413      	add	r3, r2
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	440b      	add	r3, r1
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	f040 80c6 	bne.w	8000476 <SCH_Add_Task+0x1ee>
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 80002ea:	2307      	movs	r3, #7
 80002ec:	76bb      	strb	r3, [r7, #26]
 80002ee:	e017      	b.n	8000320 <SCH_Add_Task+0x98>
                tasks[j] = tasks[j - 1];
 80002f0:	7ebb      	ldrb	r3, [r7, #26]
 80002f2:	1e5a      	subs	r2, r3, #1
 80002f4:	7eb9      	ldrb	r1, [r7, #26]
 80002f6:	4866      	ldr	r0, [pc, #408]	; (8000490 <SCH_Add_Task+0x208>)
 80002f8:	460b      	mov	r3, r1
 80002fa:	009b      	lsls	r3, r3, #2
 80002fc:	440b      	add	r3, r1
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	4418      	add	r0, r3
 8000302:	4963      	ldr	r1, [pc, #396]	; (8000490 <SCH_Add_Task+0x208>)
 8000304:	4613      	mov	r3, r2
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	4413      	add	r3, r2
 800030a:	009b      	lsls	r3, r3, #2
 800030c:	440b      	add	r3, r1
 800030e:	4604      	mov	r4, r0
 8000310:	461d      	mov	r5, r3
 8000312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000316:	682b      	ldr	r3, [r5, #0]
 8000318:	6023      	str	r3, [r4, #0]
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 800031a:	7ebb      	ldrb	r3, [r7, #26]
 800031c:	3b01      	subs	r3, #1
 800031e:	76bb      	strb	r3, [r7, #26]
 8000320:	7eba      	ldrb	r2, [r7, #26]
 8000322:	7efb      	ldrb	r3, [r7, #27]
 8000324:	429a      	cmp	r2, r3
 8000326:	d8e3      	bhi.n	80002f0 <SCH_Add_Task+0x68>
            }
            tasks[i].pTask = pTask;
 8000328:	7efa      	ldrb	r2, [r7, #27]
 800032a:	4959      	ldr	r1, [pc, #356]	; (8000490 <SCH_Add_Task+0x208>)
 800032c:	4613      	mov	r3, r2
 800032e:	009b      	lsls	r3, r3, #2
 8000330:	4413      	add	r3, r2
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	440b      	add	r3, r1
 8000336:	68fa      	ldr	r2, [r7, #12]
 8000338:	601a      	str	r2, [r3, #0]
            tasks[i].id = currentID;
 800033a:	7efa      	ldrb	r2, [r7, #27]
 800033c:	4954      	ldr	r1, [pc, #336]	; (8000490 <SCH_Add_Task+0x208>)
 800033e:	4613      	mov	r3, r2
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	4413      	add	r3, r2
 8000344:	009b      	lsls	r3, r3, #2
 8000346:	440b      	add	r3, r1
 8000348:	3304      	adds	r3, #4
 800034a:	7e7a      	ldrb	r2, [r7, #25]
 800034c:	701a      	strb	r2, [r3, #0]
            tasks[i].period = period;
 800034e:	7efa      	ldrb	r2, [r7, #27]
 8000350:	494f      	ldr	r1, [pc, #316]	; (8000490 <SCH_Add_Task+0x208>)
 8000352:	4613      	mov	r3, r2
 8000354:	009b      	lsls	r3, r3, #2
 8000356:	4413      	add	r3, r2
 8000358:	009b      	lsls	r3, r3, #2
 800035a:	440b      	add	r3, r1
 800035c:	330c      	adds	r3, #12
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	601a      	str	r2, [r3, #0]
            tasks[i].run_me = 0;
 8000362:	7efa      	ldrb	r2, [r7, #27]
 8000364:	494a      	ldr	r1, [pc, #296]	; (8000490 <SCH_Add_Task+0x208>)
 8000366:	4613      	mov	r3, r2
 8000368:	009b      	lsls	r3, r3, #2
 800036a:	4413      	add	r3, r2
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	440b      	add	r3, r1
 8000370:	3310      	adds	r3, #16
 8000372:	2200      	movs	r2, #0
 8000374:	701a      	strb	r2, [r3, #0]
            if (currentDelay > delay) {
 8000376:	69fa      	ldr	r2, [r7, #28]
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	429a      	cmp	r2, r3
 800037c:	d950      	bls.n	8000420 <SCH_Add_Task+0x198>
                int newDelay = currentDelay - delay;
 800037e:	69fa      	ldr	r2, [r7, #28]
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	1ad3      	subs	r3, r2, r3
 8000384:	617b      	str	r3, [r7, #20]
                tasks[i].delay = tasks[i + 1].delay - newDelay;
 8000386:	7efb      	ldrb	r3, [r7, #27]
 8000388:	1c5a      	adds	r2, r3, #1
 800038a:	4941      	ldr	r1, [pc, #260]	; (8000490 <SCH_Add_Task+0x208>)
 800038c:	4613      	mov	r3, r2
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	4413      	add	r3, r2
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	440b      	add	r3, r1
 8000396:	3308      	adds	r3, #8
 8000398:	6819      	ldr	r1, [r3, #0]
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	7efa      	ldrb	r2, [r7, #27]
 800039e:	1ac9      	subs	r1, r1, r3
 80003a0:	483b      	ldr	r0, [pc, #236]	; (8000490 <SCH_Add_Task+0x208>)
 80003a2:	4613      	mov	r3, r2
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	4413      	add	r3, r2
 80003a8:	009b      	lsls	r3, r3, #2
 80003aa:	4403      	add	r3, r0
 80003ac:	3308      	adds	r3, #8
 80003ae:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 80003b0:	7efa      	ldrb	r2, [r7, #27]
 80003b2:	4937      	ldr	r1, [pc, #220]	; (8000490 <SCH_Add_Task+0x208>)
 80003b4:	4613      	mov	r3, r2
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	4413      	add	r3, r2
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	440b      	add	r3, r1
 80003be:	3308      	adds	r3, #8
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d109      	bne.n	80003da <SCH_Add_Task+0x152>
                    tasks[i].run_me = 1;
 80003c6:	7efa      	ldrb	r2, [r7, #27]
 80003c8:	4931      	ldr	r1, [pc, #196]	; (8000490 <SCH_Add_Task+0x208>)
 80003ca:	4613      	mov	r3, r2
 80003cc:	009b      	lsls	r3, r3, #2
 80003ce:	4413      	add	r3, r2
 80003d0:	009b      	lsls	r3, r3, #2
 80003d2:	440b      	add	r3, r1
 80003d4:	3310      	adds	r3, #16
 80003d6:	2201      	movs	r2, #1
 80003d8:	701a      	strb	r2, [r3, #0]
                }
                tasks[i + 1].delay = newDelay;
 80003da:	7efb      	ldrb	r3, [r7, #27]
 80003dc:	1c5a      	adds	r2, r3, #1
 80003de:	6979      	ldr	r1, [r7, #20]
 80003e0:	482b      	ldr	r0, [pc, #172]	; (8000490 <SCH_Add_Task+0x208>)
 80003e2:	4613      	mov	r3, r2
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	4413      	add	r3, r2
 80003e8:	009b      	lsls	r3, r3, #2
 80003ea:	4403      	add	r3, r0
 80003ec:	3308      	adds	r3, #8
 80003ee:	6019      	str	r1, [r3, #0]
                if (tasks[i + 1].delay == 0) {
 80003f0:	7efb      	ldrb	r3, [r7, #27]
 80003f2:	1c5a      	adds	r2, r3, #1
 80003f4:	4926      	ldr	r1, [pc, #152]	; (8000490 <SCH_Add_Task+0x208>)
 80003f6:	4613      	mov	r3, r2
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	4413      	add	r3, r2
 80003fc:	009b      	lsls	r3, r3, #2
 80003fe:	440b      	add	r3, r1
 8000400:	3308      	adds	r3, #8
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d12c      	bne.n	8000462 <SCH_Add_Task+0x1da>
                    tasks[i + 1].run_me = 1;
 8000408:	7efb      	ldrb	r3, [r7, #27]
 800040a:	1c5a      	adds	r2, r3, #1
 800040c:	4920      	ldr	r1, [pc, #128]	; (8000490 <SCH_Add_Task+0x208>)
 800040e:	4613      	mov	r3, r2
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	4413      	add	r3, r2
 8000414:	009b      	lsls	r3, r3, #2
 8000416:	440b      	add	r3, r1
 8000418:	3310      	adds	r3, #16
 800041a:	2201      	movs	r2, #1
 800041c:	701a      	strb	r2, [r3, #0]
 800041e:	e020      	b.n	8000462 <SCH_Add_Task+0x1da>
                }
            }
            else {
                tasks[i].delay = delay - currentDelay;
 8000420:	7efa      	ldrb	r2, [r7, #27]
 8000422:	68b9      	ldr	r1, [r7, #8]
 8000424:	69fb      	ldr	r3, [r7, #28]
 8000426:	1ac9      	subs	r1, r1, r3
 8000428:	4819      	ldr	r0, [pc, #100]	; (8000490 <SCH_Add_Task+0x208>)
 800042a:	4613      	mov	r3, r2
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	4413      	add	r3, r2
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	4403      	add	r3, r0
 8000434:	3308      	adds	r3, #8
 8000436:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 8000438:	7efa      	ldrb	r2, [r7, #27]
 800043a:	4915      	ldr	r1, [pc, #84]	; (8000490 <SCH_Add_Task+0x208>)
 800043c:	4613      	mov	r3, r2
 800043e:	009b      	lsls	r3, r3, #2
 8000440:	4413      	add	r3, r2
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	440b      	add	r3, r1
 8000446:	3308      	adds	r3, #8
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d109      	bne.n	8000462 <SCH_Add_Task+0x1da>
                    tasks[i].run_me = 1;
 800044e:	7efa      	ldrb	r2, [r7, #27]
 8000450:	490f      	ldr	r1, [pc, #60]	; (8000490 <SCH_Add_Task+0x208>)
 8000452:	4613      	mov	r3, r2
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	4413      	add	r3, r2
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	440b      	add	r3, r1
 800045c:	3310      	adds	r3, #16
 800045e:	2201      	movs	r2, #1
 8000460:	701a      	strb	r2, [r3, #0]
                }
            }
            return tasks[i].id;
 8000462:	7efa      	ldrb	r2, [r7, #27]
 8000464:	490a      	ldr	r1, [pc, #40]	; (8000490 <SCH_Add_Task+0x208>)
 8000466:	4613      	mov	r3, r2
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	4413      	add	r3, r2
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	440b      	add	r3, r1
 8000470:	3304      	adds	r3, #4
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	e007      	b.n	8000486 <SCH_Add_Task+0x1fe>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000476:	7efb      	ldrb	r3, [r7, #27]
 8000478:	3301      	adds	r3, #1
 800047a:	76fb      	strb	r3, [r7, #27]
 800047c:	7efb      	ldrb	r3, [r7, #27]
 800047e:	2b07      	cmp	r3, #7
 8000480:	f67f af18 	bls.w	80002b4 <SCH_Add_Task+0x2c>
        }
    }
    return SCH_TASKNUMBER;
 8000484:	2308      	movs	r3, #8
}
 8000486:	4618      	mov	r0, r3
 8000488:	3724      	adds	r7, #36	; 0x24
 800048a:	46bd      	mov	sp, r7
 800048c:	bcb0      	pop	{r4, r5, r7}
 800048e:	4770      	bx	lr
 8000490:	200000c4 	.word	0x200000c4

08000494 <SCH_DeleteTask>:

unsigned char SCH_DeleteTask(uint8_t id) {
 8000494:	b4b0      	push	{r4, r5, r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 800049e:	2300      	movs	r3, #0
 80004a0:	73fb      	strb	r3, [r7, #15]
 80004a2:	e07c      	b.n	800059e <SCH_DeleteTask+0x10a>
        if (tasks[i].id == id) {
 80004a4:	7bfa      	ldrb	r2, [r7, #15]
 80004a6:	4943      	ldr	r1, [pc, #268]	; (80005b4 <SCH_DeleteTask+0x120>)
 80004a8:	4613      	mov	r3, r2
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	4413      	add	r3, r2
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	440b      	add	r3, r1
 80004b2:	3304      	adds	r3, #4
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	79fa      	ldrb	r2, [r7, #7]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	d16d      	bne.n	8000598 <SCH_DeleteTask+0x104>
            uint8_t currentID = tasks[i].id;
 80004bc:	7bfa      	ldrb	r2, [r7, #15]
 80004be:	493d      	ldr	r1, [pc, #244]	; (80005b4 <SCH_DeleteTask+0x120>)
 80004c0:	4613      	mov	r3, r2
 80004c2:	009b      	lsls	r3, r3, #2
 80004c4:	4413      	add	r3, r2
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	440b      	add	r3, r1
 80004ca:	3304      	adds	r3, #4
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	737b      	strb	r3, [r7, #13]
            if (tasks[i + 1].pTask != 0) {
 80004d0:	7bfb      	ldrb	r3, [r7, #15]
 80004d2:	1c5a      	adds	r2, r3, #1
 80004d4:	4937      	ldr	r1, [pc, #220]	; (80005b4 <SCH_DeleteTask+0x120>)
 80004d6:	4613      	mov	r3, r2
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	4413      	add	r3, r2
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	440b      	add	r3, r1
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d01d      	beq.n	8000522 <SCH_DeleteTask+0x8e>
                tasks[i + 1].delay += tasks[i].delay;
 80004e6:	7bfb      	ldrb	r3, [r7, #15]
 80004e8:	1c5a      	adds	r2, r3, #1
 80004ea:	4932      	ldr	r1, [pc, #200]	; (80005b4 <SCH_DeleteTask+0x120>)
 80004ec:	4613      	mov	r3, r2
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	4413      	add	r3, r2
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	440b      	add	r3, r1
 80004f6:	3308      	adds	r3, #8
 80004f8:	6819      	ldr	r1, [r3, #0]
 80004fa:	7bfa      	ldrb	r2, [r7, #15]
 80004fc:	482d      	ldr	r0, [pc, #180]	; (80005b4 <SCH_DeleteTask+0x120>)
 80004fe:	4613      	mov	r3, r2
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	4413      	add	r3, r2
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	4403      	add	r3, r0
 8000508:	3308      	adds	r3, #8
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	7bfa      	ldrb	r2, [r7, #15]
 800050e:	3201      	adds	r2, #1
 8000510:	4419      	add	r1, r3
 8000512:	4828      	ldr	r0, [pc, #160]	; (80005b4 <SCH_DeleteTask+0x120>)
 8000514:	4613      	mov	r3, r2
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	4413      	add	r3, r2
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	4403      	add	r3, r0
 800051e:	3308      	adds	r3, #8
 8000520:	6019      	str	r1, [r3, #0]
            }
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 8000522:	7bfb      	ldrb	r3, [r7, #15]
 8000524:	73bb      	strb	r3, [r7, #14]
 8000526:	e017      	b.n	8000558 <SCH_DeleteTask+0xc4>
                tasks[j] = tasks[j + 1];
 8000528:	7bbb      	ldrb	r3, [r7, #14]
 800052a:	1c5a      	adds	r2, r3, #1
 800052c:	7bb9      	ldrb	r1, [r7, #14]
 800052e:	4821      	ldr	r0, [pc, #132]	; (80005b4 <SCH_DeleteTask+0x120>)
 8000530:	460b      	mov	r3, r1
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	440b      	add	r3, r1
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	4418      	add	r0, r3
 800053a:	491e      	ldr	r1, [pc, #120]	; (80005b4 <SCH_DeleteTask+0x120>)
 800053c:	4613      	mov	r3, r2
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	4413      	add	r3, r2
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	440b      	add	r3, r1
 8000546:	4604      	mov	r4, r0
 8000548:	461d      	mov	r5, r3
 800054a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054e:	682b      	ldr	r3, [r5, #0]
 8000550:	6023      	str	r3, [r4, #0]
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 8000552:	7bbb      	ldrb	r3, [r7, #14]
 8000554:	3301      	adds	r3, #1
 8000556:	73bb      	strb	r3, [r7, #14]
 8000558:	7bbb      	ldrb	r3, [r7, #14]
 800055a:	2b06      	cmp	r3, #6
 800055c:	d9e4      	bls.n	8000528 <SCH_DeleteTask+0x94>
            }
            tasks[SCH_TASKNUMBER - 1].pTask = 0;
 800055e:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <SCH_DeleteTask+0x120>)
 8000560:	2200      	movs	r2, #0
 8000562:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            tasks[SCH_TASKNUMBER - 1].id = currentID;
 8000566:	4a13      	ldr	r2, [pc, #76]	; (80005b4 <SCH_DeleteTask+0x120>)
 8000568:	7b7b      	ldrb	r3, [r7, #13]
 800056a:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
            tasks[SCH_TASKNUMBER - 1].delay = 0;
 800056e:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <SCH_DeleteTask+0x120>)
 8000570:	2200      	movs	r2, #0
 8000572:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            tasks[SCH_TASKNUMBER - 1].period = 0;
 8000576:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <SCH_DeleteTask+0x120>)
 8000578:	2200      	movs	r2, #0
 800057a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            tasks[SCH_TASKNUMBER - 1].run_me = 0;
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <SCH_DeleteTask+0x120>)
 8000580:	2200      	movs	r2, #0
 8000582:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            return tasks[SCH_TASKNUMBER - 1].pTask == 0;
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <SCH_DeleteTask+0x120>)
 8000588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800058c:	2b00      	cmp	r3, #0
 800058e:	bf0c      	ite	eq
 8000590:	2301      	moveq	r3, #1
 8000592:	2300      	movne	r3, #0
 8000594:	b2db      	uxtb	r3, r3
 8000596:	e007      	b.n	80005a8 <SCH_DeleteTask+0x114>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	3301      	adds	r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	2b07      	cmp	r3, #7
 80005a2:	f67f af7f 	bls.w	80004a4 <SCH_DeleteTask+0x10>
        }
    }
    return 0;
 80005a6:	2300      	movs	r3, #0
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bcb0      	pop	{r4, r5, r7}
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	200000c4 	.word	0x200000c4

080005b8 <isButtonPressed>:
int keyReg2[4] = { NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE };
int keyReg3[4] = { NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE };
int button_flag[4] = { 0, 0, 0, 0 };
int TimeOutForKeyPress[4] = { 500, 500, 500, 500 };

int isButtonPressed(int index) {
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 80005c0:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <isButtonPressed+0x3c>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d10d      	bne.n	80005e8 <isButtonPressed+0x30>
		button_flag[0] = 0;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <isButtonPressed+0x3c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
		button_flag[1] = 0;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <isButtonPressed+0x3c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	605a      	str	r2, [r3, #4]
		button_flag[2] = 0;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <isButtonPressed+0x3c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
		button_flag[3] = 0;
 80005de:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <isButtonPressed+0x3c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
		return 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	e000      	b.n	80005ea <isButtonPressed+0x32>
	} else
		return 0;
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	20000088 	.word	0x20000088

080005f8 <subKeyProcess>:
		return 1;
	} else
		return 0;
}

void subKeyProcess(int index) {
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <subKeyProcess+0x1c>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2101      	movs	r1, #1
 8000606:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	20000088 	.word	0x20000088

08000618 <getKeyInput>:

void getKeyInput() {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++) {
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	e0af      	b.n	8000784 <getKeyInput+0x16c>
		keyReg2[i] = keyReg1[i];
 8000624:	4a5c      	ldr	r2, [pc, #368]	; (8000798 <getKeyInput+0x180>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800062c:	495b      	ldr	r1, [pc, #364]	; (800079c <getKeyInput+0x184>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg0[i];
 8000634:	4a5a      	ldr	r2, [pc, #360]	; (80007a0 <getKeyInput+0x188>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800063c:	4956      	ldr	r1, [pc, #344]	; (8000798 <getKeyInput+0x180>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b03      	cmp	r3, #3
 8000648:	d83a      	bhi.n	80006c0 <getKeyInput+0xa8>
 800064a:	a201      	add	r2, pc, #4	; (adr r2, 8000650 <getKeyInput+0x38>)
 800064c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000650:	08000661 	.word	0x08000661
 8000654:	08000679 	.word	0x08000679
 8000658:	08000691 	.word	0x08000691
 800065c:	080006a9 	.word	0x080006a9
		switch (i) {
		case MODE:
			keyReg0[i] = HAL_GPIO_ReadPin(but1_GPIO_Port, but1_Pin);
 8000660:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000664:	484f      	ldr	r0, [pc, #316]	; (80007a4 <getKeyInput+0x18c>)
 8000666:	f001 fa75 	bl	8001b54 <HAL_GPIO_ReadPin>
 800066a:	4603      	mov	r3, r0
 800066c:	4619      	mov	r1, r3
 800066e:	4a4c      	ldr	r2, [pc, #304]	; (80007a0 <getKeyInput+0x188>)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000676:	e024      	b.n	80006c2 <getKeyInput+0xaa>
		case INC:
			keyReg0[i] = HAL_GPIO_ReadPin(but2_GPIO_Port, but2_Pin);
 8000678:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800067c:	4849      	ldr	r0, [pc, #292]	; (80007a4 <getKeyInput+0x18c>)
 800067e:	f001 fa69 	bl	8001b54 <HAL_GPIO_ReadPin>
 8000682:	4603      	mov	r3, r0
 8000684:	4619      	mov	r1, r3
 8000686:	4a46      	ldr	r2, [pc, #280]	; (80007a0 <getKeyInput+0x188>)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800068e:	e018      	b.n	80006c2 <getKeyInput+0xaa>
		case DEC:
			keyReg0[i] = HAL_GPIO_ReadPin(but3_GPIO_Port, but3_Pin);
 8000690:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000694:	4843      	ldr	r0, [pc, #268]	; (80007a4 <getKeyInput+0x18c>)
 8000696:	f001 fa5d 	bl	8001b54 <HAL_GPIO_ReadPin>
 800069a:	4603      	mov	r3, r0
 800069c:	4619      	mov	r1, r3
 800069e:	4a40      	ldr	r2, [pc, #256]	; (80007a0 <getKeyInput+0x188>)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80006a6:	e00c      	b.n	80006c2 <getKeyInput+0xaa>
		case APPLY:
			keyReg0[i] = HAL_GPIO_ReadPin(but4_GPIO_Port, but4_Pin);
 80006a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ac:	483d      	ldr	r0, [pc, #244]	; (80007a4 <getKeyInput+0x18c>)
 80006ae:	f001 fa51 	bl	8001b54 <HAL_GPIO_ReadPin>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4619      	mov	r1, r3
 80006b6:	4a3a      	ldr	r2, [pc, #232]	; (80007a0 <getKeyInput+0x188>)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80006be:	e000      	b.n	80006c2 <getKeyInput+0xaa>
		default:
			break;
 80006c0:	bf00      	nop
		}

		if ((keyReg1[i] == keyReg0[i]) && (keyReg1[i] == keyReg2[i])) {
 80006c2:	4a35      	ldr	r2, [pc, #212]	; (8000798 <getKeyInput+0x180>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006ca:	4935      	ldr	r1, [pc, #212]	; (80007a0 <getKeyInput+0x188>)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d153      	bne.n	800077e <getKeyInput+0x166>
 80006d6:	4a30      	ldr	r2, [pc, #192]	; (8000798 <getKeyInput+0x180>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006de:	492f      	ldr	r1, [pc, #188]	; (800079c <getKeyInput+0x184>)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d149      	bne.n	800077e <getKeyInput+0x166>
			if (keyReg2[i] != keyReg3[i]) {
 80006ea:	4a2c      	ldr	r2, [pc, #176]	; (800079c <getKeyInput+0x184>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006f2:	492d      	ldr	r1, [pc, #180]	; (80007a8 <getKeyInput+0x190>)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d01c      	beq.n	8000738 <getKeyInput+0x120>
				keyReg3[i] = keyReg2[i];
 80006fe:	4a27      	ldr	r2, [pc, #156]	; (800079c <getKeyInput+0x184>)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000706:	4928      	ldr	r1, [pc, #160]	; (80007a8 <getKeyInput+0x190>)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (keyReg3[i] == PRESSED_STATE) {
 800070e:	4a26      	ldr	r2, [pc, #152]	; (80007a8 <getKeyInput+0x190>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d131      	bne.n	800077e <getKeyInput+0x166>
					subKeyProcess(i);
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f7ff ff6c 	bl	80005f8 <subKeyProcess>
					TimeOutForKeyPress[i] = 500;
 8000720:	4a22      	ldr	r2, [pc, #136]	; (80007ac <getKeyInput+0x194>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000728:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_flag[i] = 1;
 800072c:	4a20      	ldr	r2, [pc, #128]	; (80007b0 <getKeyInput+0x198>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2101      	movs	r1, #1
 8000732:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000736:	e022      	b.n	800077e <getKeyInput+0x166>
				}
			} else {
				TimeOutForKeyPress[i]--;
 8000738:	4a1c      	ldr	r2, [pc, #112]	; (80007ac <getKeyInput+0x194>)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000740:	1e5a      	subs	r2, r3, #1
 8000742:	491a      	ldr	r1, [pc, #104]	; (80007ac <getKeyInput+0x194>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0) {
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <getKeyInput+0x194>)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d113      	bne.n	800077e <getKeyInput+0x166>
					TimeOutForKeyPress[i] = 500;
 8000756:	4a15      	ldr	r2, [pc, #84]	; (80007ac <getKeyInput+0x194>)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800075e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if (keyReg3[i] == PRESSED_STATE){
 8000762:	4a11      	ldr	r2, [pc, #68]	; (80007a8 <getKeyInput+0x190>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d107      	bne.n	800077e <getKeyInput+0x166>
						subKeyProcess(i);
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff42 	bl	80005f8 <subKeyProcess>
						button_flag[i] = 1;
 8000774:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <getKeyInput+0x198>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2101      	movs	r1, #1
 800077a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	3301      	adds	r3, #1
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b03      	cmp	r3, #3
 8000788:	f77f af4c 	ble.w	8000624 <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 800078c:	bf00      	nop
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000010 	.word	0x20000010
 800079c:	20000020 	.word	0x20000020
 80007a0:	20000000 	.word	0x20000000
 80007a4:	40010c00 	.word	0x40010c00
 80007a8:	20000030 	.word	0x20000030
 80007ac:	20000040 	.word	0x20000040
 80007b0:	20000088 	.word	0x20000088

080007b4 <fsm_automatic_run>:
 *      Author: ADMIN
 */

#include "global.h"

void fsm_automatic_run(){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	switch(status){
 80007b8:	4b62      	ldr	r3, [pc, #392]	; (8000944 <fsm_automatic_run+0x190>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b03      	cmp	r3, #3
 80007be:	d06a      	beq.n	8000896 <fsm_automatic_run+0xe2>
 80007c0:	2b03      	cmp	r3, #3
 80007c2:	f300 80b7 	bgt.w	8000934 <fsm_automatic_run+0x180>
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d002      	beq.n	80007d0 <fsm_automatic_run+0x1c>
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d016      	beq.n	80007fc <fsm_automatic_run+0x48>
			if (isButtonPressed(MODE)){
				status = RED_MODE;
			}
			break;
		default:
			break;
 80007ce:	e0b1      	b.n	8000934 <fsm_automatic_run+0x180>
			number1 = durForGreen; //time count down for red
 80007d0:	4b5d      	ldr	r3, [pc, #372]	; (8000948 <fsm_automatic_run+0x194>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a5d      	ldr	r2, [pc, #372]	; (800094c <fsm_automatic_run+0x198>)
 80007d6:	6013      	str	r3, [r2, #0]
			number2 = durForRed; //time count down for green
 80007d8:	4b5d      	ldr	r3, [pc, #372]	; (8000950 <fsm_automatic_run+0x19c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a5d      	ldr	r2, [pc, #372]	; (8000954 <fsm_automatic_run+0x1a0>)
 80007de:	6013      	str	r3, [r2, #0]
			led_red_and_green(); //R0 - G1
 80007e0:	f000 fdf0 	bl	80013c4 <led_red_and_green>
			setTimerRed(); // 5s
 80007e4:	f000 fcb8 	bl	8001158 <setTimerRed>
			setTimerGreen(); // 3s
 80007e8:	f000 fcc8 	bl	800117c <setTimerGreen>
			setOneSecond(1000);
 80007ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007f0:	f000 fce2 	bl	80011b8 <setOneSecond>
			status = LEFTRIGHT;
 80007f4:	4b53      	ldr	r3, [pc, #332]	; (8000944 <fsm_automatic_run+0x190>)
 80007f6:	2202      	movs	r2, #2
 80007f8:	601a      	str	r2, [r3, #0]
			break;
 80007fa:	e0a0      	b.n	800093e <fsm_automatic_run+0x18a>
			if (oneSecondFlag() == 1){
 80007fc:	f000 fc9a 	bl	8001134 <oneSecondFlag>
 8000800:	4603      	mov	r3, r0
 8000802:	2b01      	cmp	r3, #1
 8000804:	d10d      	bne.n	8000822 <fsm_automatic_run+0x6e>
				number1--;
 8000806:	4b51      	ldr	r3, [pc, #324]	; (800094c <fsm_automatic_run+0x198>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	3b01      	subs	r3, #1
 800080c:	4a4f      	ldr	r2, [pc, #316]	; (800094c <fsm_automatic_run+0x198>)
 800080e:	6013      	str	r3, [r2, #0]
				number2--;
 8000810:	4b50      	ldr	r3, [pc, #320]	; (8000954 <fsm_automatic_run+0x1a0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	3b01      	subs	r3, #1
 8000816:	4a4f      	ldr	r2, [pc, #316]	; (8000954 <fsm_automatic_run+0x1a0>)
 8000818:	6013      	str	r3, [r2, #0]
				setOneSecond(1000);
 800081a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800081e:	f000 fccb 	bl	80011b8 <setOneSecond>
			if (greenFlag() == 1){
 8000822:	f000 fc63 	bl	80010ec <greenFlag>
 8000826:	4603      	mov	r3, r0
 8000828:	2b01      	cmp	r3, #1
 800082a:	d110      	bne.n	800084e <fsm_automatic_run+0x9a>
				HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET); //turn on Y1
 800082c:	2201      	movs	r2, #1
 800082e:	2140      	movs	r1, #64	; 0x40
 8000830:	4849      	ldr	r0, [pc, #292]	; (8000958 <fsm_automatic_run+0x1a4>)
 8000832:	f001 f9a6 	bl	8001b82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);//turn off G1
 8000836:	2200      	movs	r2, #0
 8000838:	2120      	movs	r1, #32
 800083a:	4847      	ldr	r0, [pc, #284]	; (8000958 <fsm_automatic_run+0x1a4>)
 800083c:	f001 f9a1 	bl	8001b82 <HAL_GPIO_WritePin>
				number1 = durForRed - durForGreen;
 8000840:	4b43      	ldr	r3, [pc, #268]	; (8000950 <fsm_automatic_run+0x19c>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4b40      	ldr	r3, [pc, #256]	; (8000948 <fsm_automatic_run+0x194>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	4a40      	ldr	r2, [pc, #256]	; (800094c <fsm_automatic_run+0x198>)
 800084c:	6013      	str	r3, [r2, #0]
			if (redFlag() == 1){
 800084e:	f000 fc3b 	bl	80010c8 <redFlag>
 8000852:	4603      	mov	r3, r0
 8000854:	2b01      	cmp	r3, #1
 8000856:	d114      	bne.n	8000882 <fsm_automatic_run+0xce>
				number1 = durForRed;
 8000858:	4b3d      	ldr	r3, [pc, #244]	; (8000950 <fsm_automatic_run+0x19c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a3b      	ldr	r2, [pc, #236]	; (800094c <fsm_automatic_run+0x198>)
 800085e:	6013      	str	r3, [r2, #0]
				number2 = durForGreen;
 8000860:	4b39      	ldr	r3, [pc, #228]	; (8000948 <fsm_automatic_run+0x194>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a3b      	ldr	r2, [pc, #236]	; (8000954 <fsm_automatic_run+0x1a0>)
 8000866:	6013      	str	r3, [r2, #0]
				led_green_and_red(); // R1 - G0
 8000868:	f000 fdd2 	bl	8001410 <led_green_and_red>
				setTimerRed();
 800086c:	f000 fc74 	bl	8001158 <setTimerRed>
				setTimerGreen();
 8000870:	f000 fc84 	bl	800117c <setTimerGreen>
				setOneSecond(1000);
 8000874:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000878:	f000 fc9e 	bl	80011b8 <setOneSecond>
				status = TOPBOT;
 800087c:	4b31      	ldr	r3, [pc, #196]	; (8000944 <fsm_automatic_run+0x190>)
 800087e:	2203      	movs	r2, #3
 8000880:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(MODE)){
 8000882:	2000      	movs	r0, #0
 8000884:	f7ff fe98 	bl	80005b8 <isButtonPressed>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d054      	beq.n	8000938 <fsm_automatic_run+0x184>
				status = RED_MODE;
 800088e:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <fsm_automatic_run+0x190>)
 8000890:	220c      	movs	r2, #12
 8000892:	601a      	str	r2, [r3, #0]
			break;
 8000894:	e050      	b.n	8000938 <fsm_automatic_run+0x184>
			if (oneSecondFlag() == 1){
 8000896:	f000 fc4d 	bl	8001134 <oneSecondFlag>
 800089a:	4603      	mov	r3, r0
 800089c:	2b01      	cmp	r3, #1
 800089e:	d10d      	bne.n	80008bc <fsm_automatic_run+0x108>
				number1--;
 80008a0:	4b2a      	ldr	r3, [pc, #168]	; (800094c <fsm_automatic_run+0x198>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	3b01      	subs	r3, #1
 80008a6:	4a29      	ldr	r2, [pc, #164]	; (800094c <fsm_automatic_run+0x198>)
 80008a8:	6013      	str	r3, [r2, #0]
				number2--;
 80008aa:	4b2a      	ldr	r3, [pc, #168]	; (8000954 <fsm_automatic_run+0x1a0>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	4a28      	ldr	r2, [pc, #160]	; (8000954 <fsm_automatic_run+0x1a0>)
 80008b2:	6013      	str	r3, [r2, #0]
				setOneSecond(1000);
 80008b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b8:	f000 fc7e 	bl	80011b8 <setOneSecond>
			if (greenFlag() == 1){
 80008bc:	f000 fc16 	bl	80010ec <greenFlag>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d112      	bne.n	80008ec <fsm_automatic_run+0x138>
				HAL_GPIO_WritePin(Y0_GPIO_Port,Y0_Pin, SET); //turn on Y0
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008cc:	4822      	ldr	r0, [pc, #136]	; (8000958 <fsm_automatic_run+0x1a4>)
 80008ce:	f001 f958 	bl	8001b82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET); //turn off G0
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d8:	481f      	ldr	r0, [pc, #124]	; (8000958 <fsm_automatic_run+0x1a4>)
 80008da:	f001 f952 	bl	8001b82 <HAL_GPIO_WritePin>
				number2 = durForRed - durForGreen;
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <fsm_automatic_run+0x19c>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <fsm_automatic_run+0x194>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	4a1a      	ldr	r2, [pc, #104]	; (8000954 <fsm_automatic_run+0x1a0>)
 80008ea:	6013      	str	r3, [r2, #0]
			if (redFlag() == 1){
 80008ec:	f000 fbec 	bl	80010c8 <redFlag>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d114      	bne.n	8000920 <fsm_automatic_run+0x16c>
				number1 = durForGreen;
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <fsm_automatic_run+0x194>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a14      	ldr	r2, [pc, #80]	; (800094c <fsm_automatic_run+0x198>)
 80008fc:	6013      	str	r3, [r2, #0]
				number2 = durForRed;
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <fsm_automatic_run+0x19c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a14      	ldr	r2, [pc, #80]	; (8000954 <fsm_automatic_run+0x1a0>)
 8000904:	6013      	str	r3, [r2, #0]
				led_red_and_green(); //R1 - G0
 8000906:	f000 fd5d 	bl	80013c4 <led_red_and_green>
				setTimerRed();
 800090a:	f000 fc25 	bl	8001158 <setTimerRed>
				setTimerGreen();
 800090e:	f000 fc35 	bl	800117c <setTimerGreen>
				setOneSecond(1000);
 8000912:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000916:	f000 fc4f 	bl	80011b8 <setOneSecond>
				status = LEFTRIGHT;
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <fsm_automatic_run+0x190>)
 800091c:	2202      	movs	r2, #2
 800091e:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(MODE)){
 8000920:	2000      	movs	r0, #0
 8000922:	f7ff fe49 	bl	80005b8 <isButtonPressed>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d007      	beq.n	800093c <fsm_automatic_run+0x188>
				status = RED_MODE;
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <fsm_automatic_run+0x190>)
 800092e:	220c      	movs	r2, #12
 8000930:	601a      	str	r2, [r3, #0]
			break;
 8000932:	e003      	b.n	800093c <fsm_automatic_run+0x188>
			break;
 8000934:	bf00      	nop
 8000936:	e002      	b.n	800093e <fsm_automatic_run+0x18a>
			break;
 8000938:	bf00      	nop
 800093a:	e000      	b.n	800093e <fsm_automatic_run+0x18a>
			break;
 800093c:	bf00      	nop
	}
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000050 	.word	0x20000050
 8000948:	20000164 	.word	0x20000164
 800094c:	20000168 	.word	0x20000168
 8000950:	2000016c 	.word	0x2000016c
 8000954:	20000170 	.word	0x20000170
 8000958:	40010c00 	.word	0x40010c00

0800095c <fsm_manual_run>:
 *  Created on: Oct 26, 2024
 *      Author: ADMIN
 */
#include "global.h"

void fsm_manual_run(){
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	switch(status){
 8000960:	4b6e      	ldr	r3, [pc, #440]	; (8000b1c <fsm_manual_run+0x1c0>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b0e      	cmp	r3, #14
 8000966:	d047      	beq.n	80009f8 <fsm_manual_run+0x9c>
 8000968:	2b0e      	cmp	r3, #14
 800096a:	f300 80cd 	bgt.w	8000b08 <fsm_manual_run+0x1ac>
 800096e:	2b0c      	cmp	r3, #12
 8000970:	d002      	beq.n	8000978 <fsm_manual_run+0x1c>
 8000972:	2b0d      	cmp	r3, #13
 8000974:	d07e      	beq.n	8000a74 <fsm_manual_run+0x118>
			} else if (isButtonPressed(APPLY) == 1){
				status = INIT;
			}
			break;
		default:
			break;
 8000976:	e0c7      	b.n	8000b08 <fsm_manual_run+0x1ac>
			number1 = 2;
 8000978:	4b69      	ldr	r3, [pc, #420]	; (8000b20 <fsm_manual_run+0x1c4>)
 800097a:	2202      	movs	r2, #2
 800097c:	601a      	str	r2, [r3, #0]
			number2 = durForRed;
 800097e:	4b69      	ldr	r3, [pc, #420]	; (8000b24 <fsm_manual_run+0x1c8>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a69      	ldr	r2, [pc, #420]	; (8000b28 <fsm_manual_run+0x1cc>)
 8000984:	6013      	str	r3, [r2, #0]
			led_red();
 8000986:	f000 fd69 	bl	800145c <led_red>
			if (isButtonPressed(MODE) == 1){
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff fe14 	bl	80005b8 <isButtonPressed>
 8000990:	4603      	mov	r3, r0
 8000992:	2b01      	cmp	r3, #1
 8000994:	d103      	bne.n	800099e <fsm_manual_run+0x42>
				status = GREEN_MODE;
 8000996:	4b61      	ldr	r3, [pc, #388]	; (8000b1c <fsm_manual_run+0x1c0>)
 8000998:	220e      	movs	r2, #14
 800099a:	601a      	str	r2, [r3, #0]
			break;
 800099c:	e0b6      	b.n	8000b0c <fsm_manual_run+0x1b0>
			} else if (isButtonPressed(INC) == 1){
 800099e:	2001      	movs	r0, #1
 80009a0:	f7ff fe0a 	bl	80005b8 <isButtonPressed>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d10a      	bne.n	80009c0 <fsm_manual_run+0x64>
				durForRed++;
 80009aa:	4b5e      	ldr	r3, [pc, #376]	; (8000b24 <fsm_manual_run+0x1c8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	3301      	adds	r3, #1
 80009b0:	4a5c      	ldr	r2, [pc, #368]	; (8000b24 <fsm_manual_run+0x1c8>)
 80009b2:	6013      	str	r3, [r2, #0]
				durForGreen++;
 80009b4:	4b5d      	ldr	r3, [pc, #372]	; (8000b2c <fsm_manual_run+0x1d0>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	3301      	adds	r3, #1
 80009ba:	4a5c      	ldr	r2, [pc, #368]	; (8000b2c <fsm_manual_run+0x1d0>)
 80009bc:	6013      	str	r3, [r2, #0]
			break;
 80009be:	e0a5      	b.n	8000b0c <fsm_manual_run+0x1b0>
			} else if (isButtonPressed(DEC) == 1){
 80009c0:	2002      	movs	r0, #2
 80009c2:	f7ff fdf9 	bl	80005b8 <isButtonPressed>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d10a      	bne.n	80009e2 <fsm_manual_run+0x86>
				if (durForRed > 2) {
 80009cc:	4b55      	ldr	r3, [pc, #340]	; (8000b24 <fsm_manual_run+0x1c8>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	f340 809b 	ble.w	8000b0c <fsm_manual_run+0x1b0>
					durForRed--;
 80009d6:	4b53      	ldr	r3, [pc, #332]	; (8000b24 <fsm_manual_run+0x1c8>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	3b01      	subs	r3, #1
 80009dc:	4a51      	ldr	r2, [pc, #324]	; (8000b24 <fsm_manual_run+0x1c8>)
 80009de:	6013      	str	r3, [r2, #0]
			break;
 80009e0:	e094      	b.n	8000b0c <fsm_manual_run+0x1b0>
			} else if (isButtonPressed(APPLY) == 1){
 80009e2:	2003      	movs	r0, #3
 80009e4:	f7ff fde8 	bl	80005b8 <isButtonPressed>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	f040 808e 	bne.w	8000b0c <fsm_manual_run+0x1b0>
				status = INIT;
 80009f0:	4b4a      	ldr	r3, [pc, #296]	; (8000b1c <fsm_manual_run+0x1c0>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	601a      	str	r2, [r3, #0]
			break;
 80009f6:	e089      	b.n	8000b0c <fsm_manual_run+0x1b0>
			number1 = 3;
 80009f8:	4b49      	ldr	r3, [pc, #292]	; (8000b20 <fsm_manual_run+0x1c4>)
 80009fa:	2203      	movs	r2, #3
 80009fc:	601a      	str	r2, [r3, #0]
			number2 = durForGreen;
 80009fe:	4b4b      	ldr	r3, [pc, #300]	; (8000b2c <fsm_manual_run+0x1d0>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a49      	ldr	r2, [pc, #292]	; (8000b28 <fsm_manual_run+0x1cc>)
 8000a04:	6013      	str	r3, [r2, #0]
			led_green();
 8000a06:	f000 fd4d 	bl	80014a4 <led_green>
			if (isButtonPressed(MODE) == 1){
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f7ff fdd4 	bl	80005b8 <isButtonPressed>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d103      	bne.n	8000a1e <fsm_manual_run+0xc2>
				status = YELLOW_MODE;
 8000a16:	4b41      	ldr	r3, [pc, #260]	; (8000b1c <fsm_manual_run+0x1c0>)
 8000a18:	220d      	movs	r2, #13
 8000a1a:	601a      	str	r2, [r3, #0]
			break;
 8000a1c:	e078      	b.n	8000b10 <fsm_manual_run+0x1b4>
			} else if (isButtonPressed(INC) == 1){
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f7ff fdca 	bl	80005b8 <isButtonPressed>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d10a      	bne.n	8000a40 <fsm_manual_run+0xe4>
				durForRed++;
 8000a2a:	4b3e      	ldr	r3, [pc, #248]	; (8000b24 <fsm_manual_run+0x1c8>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	4a3c      	ldr	r2, [pc, #240]	; (8000b24 <fsm_manual_run+0x1c8>)
 8000a32:	6013      	str	r3, [r2, #0]
				durForGreen++;
 8000a34:	4b3d      	ldr	r3, [pc, #244]	; (8000b2c <fsm_manual_run+0x1d0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	4a3c      	ldr	r2, [pc, #240]	; (8000b2c <fsm_manual_run+0x1d0>)
 8000a3c:	6013      	str	r3, [r2, #0]
			break;
 8000a3e:	e067      	b.n	8000b10 <fsm_manual_run+0x1b4>
			} else if (isButtonPressed(DEC) == 1){
 8000a40:	2002      	movs	r0, #2
 8000a42:	f7ff fdb9 	bl	80005b8 <isButtonPressed>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d109      	bne.n	8000a60 <fsm_manual_run+0x104>
				if (durForGreen > 1)
 8000a4c:	4b37      	ldr	r3, [pc, #220]	; (8000b2c <fsm_manual_run+0x1d0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	dd5d      	ble.n	8000b10 <fsm_manual_run+0x1b4>
					durForGreen--;
 8000a54:	4b35      	ldr	r3, [pc, #212]	; (8000b2c <fsm_manual_run+0x1d0>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	4a34      	ldr	r2, [pc, #208]	; (8000b2c <fsm_manual_run+0x1d0>)
 8000a5c:	6013      	str	r3, [r2, #0]
			break;
 8000a5e:	e057      	b.n	8000b10 <fsm_manual_run+0x1b4>
			} else if (isButtonPressed(APPLY) == 1){
 8000a60:	2003      	movs	r0, #3
 8000a62:	f7ff fda9 	bl	80005b8 <isButtonPressed>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d151      	bne.n	8000b10 <fsm_manual_run+0x1b4>
				status = INIT;
 8000a6c:	4b2b      	ldr	r3, [pc, #172]	; (8000b1c <fsm_manual_run+0x1c0>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	601a      	str	r2, [r3, #0]
			break;
 8000a72:	e04d      	b.n	8000b10 <fsm_manual_run+0x1b4>
			number1 = 4;
 8000a74:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <fsm_manual_run+0x1c4>)
 8000a76:	2204      	movs	r2, #4
 8000a78:	601a      	str	r2, [r3, #0]
			number2 = durForRed - durForGreen;
 8000a7a:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <fsm_manual_run+0x1c8>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	4b2b      	ldr	r3, [pc, #172]	; (8000b2c <fsm_manual_run+0x1d0>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	4a28      	ldr	r2, [pc, #160]	; (8000b28 <fsm_manual_run+0x1cc>)
 8000a86:	6013      	str	r3, [r2, #0]
			led_yellow();
 8000a88:	f000 fd30 	bl	80014ec <led_yellow>
			if (isButtonPressed(MODE) == 1){
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f7ff fd93 	bl	80005b8 <isButtonPressed>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d109      	bne.n	8000aac <fsm_manual_run+0x150>
				status = INIT;
 8000a98:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <fsm_manual_run+0x1c0>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	601a      	str	r2, [r3, #0]
				durForGreen = 3;
 8000a9e:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <fsm_manual_run+0x1d0>)
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	601a      	str	r2, [r3, #0]
				durForRed = 5;
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <fsm_manual_run+0x1c8>)
 8000aa6:	2205      	movs	r2, #5
 8000aa8:	601a      	str	r2, [r3, #0]
			break;
 8000aaa:	e033      	b.n	8000b14 <fsm_manual_run+0x1b8>
			} else if (isButtonPressed(INC) == 1){
 8000aac:	2001      	movs	r0, #1
 8000aae:	f7ff fd83 	bl	80005b8 <isButtonPressed>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d10a      	bne.n	8000ace <fsm_manual_run+0x172>
				durForGreen++;
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <fsm_manual_run+0x1d0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	3301      	adds	r3, #1
 8000abe:	4a1b      	ldr	r2, [pc, #108]	; (8000b2c <fsm_manual_run+0x1d0>)
 8000ac0:	6013      	str	r3, [r2, #0]
				durForRed++;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <fsm_manual_run+0x1c8>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	4a16      	ldr	r2, [pc, #88]	; (8000b24 <fsm_manual_run+0x1c8>)
 8000aca:	6013      	str	r3, [r2, #0]
			break;
 8000acc:	e022      	b.n	8000b14 <fsm_manual_run+0x1b8>
			} else if (isButtonPressed(DEC) == 1){
 8000ace:	2002      	movs	r0, #2
 8000ad0:	f7ff fd72 	bl	80005b8 <isButtonPressed>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d10c      	bne.n	8000af4 <fsm_manual_run+0x198>
				if ((durForRed - durForGreen) > 1) {
 8000ada:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <fsm_manual_run+0x1c8>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <fsm_manual_run+0x1d0>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	dd15      	ble.n	8000b14 <fsm_manual_run+0x1b8>
					durForRed--;
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <fsm_manual_run+0x1c8>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <fsm_manual_run+0x1c8>)
 8000af0:	6013      	str	r3, [r2, #0]
			break;
 8000af2:	e00f      	b.n	8000b14 <fsm_manual_run+0x1b8>
			} else if (isButtonPressed(APPLY) == 1){
 8000af4:	2003      	movs	r0, #3
 8000af6:	f7ff fd5f 	bl	80005b8 <isButtonPressed>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d109      	bne.n	8000b14 <fsm_manual_run+0x1b8>
				status = INIT;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <fsm_manual_run+0x1c0>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	601a      	str	r2, [r3, #0]
			break;
 8000b06:	e005      	b.n	8000b14 <fsm_manual_run+0x1b8>
			break;
 8000b08:	bf00      	nop
 8000b0a:	e004      	b.n	8000b16 <fsm_manual_run+0x1ba>
			break;
 8000b0c:	bf00      	nop
 8000b0e:	e002      	b.n	8000b16 <fsm_manual_run+0x1ba>
			break;
 8000b10:	bf00      	nop
 8000b12:	e000      	b.n	8000b16 <fsm_manual_run+0x1ba>
			break;
 8000b14:	bf00      	nop
	}
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000050 	.word	0x20000050
 8000b20:	20000168 	.word	0x20000168
 8000b24:	2000016c 	.word	0x2000016c
 8000b28:	20000170 	.word	0x20000170
 8000b2c:	20000164 	.word	0x20000164

08000b30 <fsm_setting>:

#include "fsm_setting.h"

//int durForRed = 5;
//int durForGreen = 3;
void fsm_setting() {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	enableSeg(number1, number2);
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <fsm_setting+0x18>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <fsm_setting+0x1c>)
 8000b3a:	6812      	ldr	r2, [r2, #0]
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 f8f2 	bl	8000d28 <enableSeg>
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000168 	.word	0x20000168
 8000b4c:	20000170 	.word	0x20000170

08000b50 <cleaeAll7SEG>:
 *      Author: ADMIN
 */

#include "led7_segment.h"

void cleaeAll7SEG() {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_All, RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b5a:	4802      	ldr	r0, [pc, #8]	; (8000b64 <cleaeAll7SEG+0x14>)
 8000b5c:	f001 f811 	bl	8001b82 <HAL_GPIO_WritePin>
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40010800 	.word	0x40010800

08000b68 <turnSeg0>:

static uint8_t LED7_SEG[10] = { 0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8,
		0x80, 0x90 };

void turnSeg0(int num) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, SEG0_Pin, ((LED7_SEG[num] >> 0) & 0x01));
 8000b70:	4a35      	ldr	r2, [pc, #212]	; (8000c48 <turnSeg0+0xe0>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	461a      	mov	r2, r3
 8000b80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b84:	4831      	ldr	r0, [pc, #196]	; (8000c4c <turnSeg0+0xe4>)
 8000b86:	f000 fffc 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG1_Pin, ((LED7_SEG[num] >> 1) & 0x01));
 8000b8a:	4a2f      	ldr	r2, [pc, #188]	; (8000c48 <turnSeg0+0xe0>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4413      	add	r3, r2
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	085b      	lsrs	r3, r3, #1
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba2:	482a      	ldr	r0, [pc, #168]	; (8000c4c <turnSeg0+0xe4>)
 8000ba4:	f000 ffed 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG2_Pin, ((LED7_SEG[num] >> 2) & 0x01));
 8000ba8:	4a27      	ldr	r2, [pc, #156]	; (8000c48 <turnSeg0+0xe0>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	089b      	lsrs	r3, r3, #2
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	461a      	mov	r2, r3
 8000bbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bc0:	4822      	ldr	r0, [pc, #136]	; (8000c4c <turnSeg0+0xe4>)
 8000bc2:	f000 ffde 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG3_Pin, ((LED7_SEG[num] >> 3) & 0x01));
 8000bc6:	4a20      	ldr	r2, [pc, #128]	; (8000c48 <turnSeg0+0xe0>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4413      	add	r3, r2
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	08db      	lsrs	r3, r3, #3
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	461a      	mov	r2, r3
 8000bda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bde:	481b      	ldr	r0, [pc, #108]	; (8000c4c <turnSeg0+0xe4>)
 8000be0:	f000 ffcf 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG4_Pin, ((LED7_SEG[num] >> 4) & 0x01));
 8000be4:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <turnSeg0+0xe0>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	091b      	lsrs	r3, r3, #4
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bfc:	4813      	ldr	r0, [pc, #76]	; (8000c4c <turnSeg0+0xe4>)
 8000bfe:	f000 ffc0 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG5_Pin, ((LED7_SEG[num] >> 5) & 0x01));
 8000c02:	4a11      	ldr	r2, [pc, #68]	; (8000c48 <turnSeg0+0xe0>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4413      	add	r3, r2
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	095b      	lsrs	r3, r3, #5
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	461a      	mov	r2, r3
 8000c16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1a:	480c      	ldr	r0, [pc, #48]	; (8000c4c <turnSeg0+0xe4>)
 8000c1c:	f000 ffb1 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG6_Pin, ((LED7_SEG[num] >> 6) & 0x01));
 8000c20:	4a09      	ldr	r2, [pc, #36]	; (8000c48 <turnSeg0+0xe0>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	099b      	lsrs	r3, r3, #6
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	461a      	mov	r2, r3
 8000c34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <turnSeg0+0xe4>)
 8000c3a:	f000 ffa2 	bl	8001b82 <HAL_GPIO_WritePin>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000054 	.word	0x20000054
 8000c4c:	40010800 	.word	0x40010800

08000c50 <turnSeg1>:

void turnSeg1(int num) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, SEG7_Pin, ((LED7_SEG[num] >> 0) & 0x01));
 8000c58:	4a31      	ldr	r2, [pc, #196]	; (8000d20 <turnSeg1+0xd0>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	461a      	mov	r2, r3
 8000c68:	2102      	movs	r1, #2
 8000c6a:	482e      	ldr	r0, [pc, #184]	; (8000d24 <turnSeg1+0xd4>)
 8000c6c:	f000 ff89 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG8_Pin, ((LED7_SEG[num] >> 1) & 0x01));
 8000c70:	4a2b      	ldr	r2, [pc, #172]	; (8000d20 <turnSeg1+0xd0>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	085b      	lsrs	r3, r3, #1
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	461a      	mov	r2, r3
 8000c84:	2104      	movs	r1, #4
 8000c86:	4827      	ldr	r0, [pc, #156]	; (8000d24 <turnSeg1+0xd4>)
 8000c88:	f000 ff7b 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG9_Pin, ((LED7_SEG[num] >> 2) & 0x01));
 8000c8c:	4a24      	ldr	r2, [pc, #144]	; (8000d20 <turnSeg1+0xd0>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	089b      	lsrs	r3, r3, #2
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	2108      	movs	r1, #8
 8000ca2:	4820      	ldr	r0, [pc, #128]	; (8000d24 <turnSeg1+0xd4>)
 8000ca4:	f000 ff6d 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG10_Pin, ((LED7_SEG[num] >> 3) & 0x01));
 8000ca8:	4a1d      	ldr	r2, [pc, #116]	; (8000d20 <turnSeg1+0xd0>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	461a      	mov	r2, r3
 8000cbc:	2110      	movs	r1, #16
 8000cbe:	4819      	ldr	r0, [pc, #100]	; (8000d24 <turnSeg1+0xd4>)
 8000cc0:	f000 ff5f 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG11_Pin, ((LED7_SEG[num] >> 4) & 0x01));
 8000cc4:	4a16      	ldr	r2, [pc, #88]	; (8000d20 <turnSeg1+0xd0>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	091b      	lsrs	r3, r3, #4
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	2120      	movs	r1, #32
 8000cda:	4812      	ldr	r0, [pc, #72]	; (8000d24 <turnSeg1+0xd4>)
 8000cdc:	f000 ff51 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG12_Pin, ((LED7_SEG[num] >> 5) & 0x01));
 8000ce0:	4a0f      	ldr	r2, [pc, #60]	; (8000d20 <turnSeg1+0xd0>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	095b      	lsrs	r3, r3, #5
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	2140      	movs	r1, #64	; 0x40
 8000cf6:	480b      	ldr	r0, [pc, #44]	; (8000d24 <turnSeg1+0xd4>)
 8000cf8:	f000 ff43 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG13_Pin, ((LED7_SEG[num] >> 6) & 0x01));
 8000cfc:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <turnSeg1+0xd0>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	099b      	lsrs	r3, r3, #6
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	461a      	mov	r2, r3
 8000d10:	2180      	movs	r1, #128	; 0x80
 8000d12:	4804      	ldr	r0, [pc, #16]	; (8000d24 <turnSeg1+0xd4>)
 8000d14:	f000 ff35 	bl	8001b82 <HAL_GPIO_WritePin>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000054 	.word	0x20000054
 8000d24:	40010800 	.word	0x40010800

08000d28 <enableSeg>:

void enableSeg(int num1, int num2) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
	switch (stateSeg) {
 8000d32:	4b46      	ldr	r3, [pc, #280]	; (8000e4c <enableSeg+0x124>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d041      	beq.n	8000dbe <enableSeg+0x96>
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	dc7c      	bgt.n	8000e38 <enableSeg+0x110>
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d002      	beq.n	8000d48 <enableSeg+0x20>
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d008      	beq.n	8000d58 <enableSeg+0x30>
			stateSeg = 1;
			setTimerEnable();
		}
		break;
	default:
		break;
 8000d46:	e077      	b.n	8000e38 <enableSeg+0x110>
		cleaeAll7SEG();
 8000d48:	f7ff ff02 	bl	8000b50 <cleaeAll7SEG>
		stateSeg = 1;
 8000d4c:	4b3f      	ldr	r3, [pc, #252]	; (8000e4c <enableSeg+0x124>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	601a      	str	r2, [r3, #0]
		setTimerEnable();
 8000d52:	f000 fa25 	bl	80011a0 <setTimerEnable>
		break;
 8000d56:	e074      	b.n	8000e42 <enableSeg+0x11a>
		turnSeg0(num1 / 10);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a3d      	ldr	r2, [pc, #244]	; (8000e50 <enableSeg+0x128>)
 8000d5c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d60:	1092      	asrs	r2, r2, #2
 8000d62:	17db      	asrs	r3, r3, #31
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fefe 	bl	8000b68 <turnSeg0>
		turnSeg1(num2 / 10);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	4a38      	ldr	r2, [pc, #224]	; (8000e50 <enableSeg+0x128>)
 8000d70:	fb82 1203 	smull	r1, r2, r2, r3
 8000d74:	1092      	asrs	r2, r2, #2
 8000d76:	17db      	asrs	r3, r3, #31
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ff68 	bl	8000c50 <turnSeg1>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2101      	movs	r1, #1
 8000d84:	4833      	ldr	r0, [pc, #204]	; (8000e54 <enableSeg+0x12c>)
 8000d86:	f000 fefc 	bl	8001b82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	2102      	movs	r1, #2
 8000d8e:	4831      	ldr	r0, [pc, #196]	; (8000e54 <enableSeg+0x12c>)
 8000d90:	f000 fef7 	bl	8001b82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2104      	movs	r1, #4
 8000d98:	482e      	ldr	r0, [pc, #184]	; (8000e54 <enableSeg+0x12c>)
 8000d9a:	f000 fef2 	bl	8001b82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2108      	movs	r1, #8
 8000da2:	482c      	ldr	r0, [pc, #176]	; (8000e54 <enableSeg+0x12c>)
 8000da4:	f000 feed 	bl	8001b82 <HAL_GPIO_WritePin>
		if (enableFlag() == 1) {
 8000da8:	f000 f9b2 	bl	8001110 <enableFlag>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d144      	bne.n	8000e3c <enableSeg+0x114>
			stateSeg = 2;
 8000db2:	4b26      	ldr	r3, [pc, #152]	; (8000e4c <enableSeg+0x124>)
 8000db4:	2202      	movs	r2, #2
 8000db6:	601a      	str	r2, [r3, #0]
			setTimerEnable();
 8000db8:	f000 f9f2 	bl	80011a0 <setTimerEnable>
		break;
 8000dbc:	e03e      	b.n	8000e3c <enableSeg+0x114>
		turnSeg0(num1 % 10);
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <enableSeg+0x128>)
 8000dc2:	fb83 1302 	smull	r1, r3, r3, r2
 8000dc6:	1099      	asrs	r1, r3, #2
 8000dc8:	17d3      	asrs	r3, r2, #31
 8000dca:	1ac9      	subs	r1, r1, r3
 8000dcc:	460b      	mov	r3, r1
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	440b      	add	r3, r1
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	1ad1      	subs	r1, r2, r3
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	f7ff fec6 	bl	8000b68 <turnSeg0>
		turnSeg1(num2 % 10);
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <enableSeg+0x128>)
 8000de0:	fb83 1302 	smull	r1, r3, r3, r2
 8000de4:	1099      	asrs	r1, r3, #2
 8000de6:	17d3      	asrs	r3, r2, #31
 8000de8:	1ac9      	subs	r1, r1, r3
 8000dea:	460b      	mov	r3, r1
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	440b      	add	r3, r1
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	1ad1      	subs	r1, r2, r3
 8000df4:	4608      	mov	r0, r1
 8000df6:	f7ff ff2b 	bl	8000c50 <turnSeg1>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	4815      	ldr	r0, [pc, #84]	; (8000e54 <enableSeg+0x12c>)
 8000e00:	f000 febf 	bl	8001b82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2102      	movs	r1, #2
 8000e08:	4812      	ldr	r0, [pc, #72]	; (8000e54 <enableSeg+0x12c>)
 8000e0a:	f000 feba 	bl	8001b82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2104      	movs	r1, #4
 8000e12:	4810      	ldr	r0, [pc, #64]	; (8000e54 <enableSeg+0x12c>)
 8000e14:	f000 feb5 	bl	8001b82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2108      	movs	r1, #8
 8000e1c:	480d      	ldr	r0, [pc, #52]	; (8000e54 <enableSeg+0x12c>)
 8000e1e:	f000 feb0 	bl	8001b82 <HAL_GPIO_WritePin>
		if (enableFlag() == 1) {
 8000e22:	f000 f975 	bl	8001110 <enableFlag>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d109      	bne.n	8000e40 <enableSeg+0x118>
			stateSeg = 1;
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <enableSeg+0x124>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	601a      	str	r2, [r3, #0]
			setTimerEnable();
 8000e32:	f000 f9b5 	bl	80011a0 <setTimerEnable>
		break;
 8000e36:	e003      	b.n	8000e40 <enableSeg+0x118>
		break;
 8000e38:	bf00      	nop
 8000e3a:	e002      	b.n	8000e42 <enableSeg+0x11a>
		break;
 8000e3c:	bf00      	nop
 8000e3e:	e000      	b.n	8000e42 <enableSeg+0x11a>
		break;
 8000e40:	bf00      	nop
	}
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000098 	.word	0x20000098
 8000e50:	66666667 	.word	0x66666667
 8000e54:	40010c00 	.word	0x40010c00

08000e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e5c:	f000 fb90 	bl	8001580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e60:	f000 f82e 	bl	8000ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e64:	f000 f8b4 	bl	8000fd0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e68:	f000 f866 	bl	8000f38 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e6c:	480e      	ldr	r0, [pc, #56]	; (8000ea8 <main+0x50>)
 8000e6e:	f001 fae5 	bl	800243c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 8000e72:	f7ff f96b 	bl	800014c <SCH_Init>
  durForRed = 5;
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <main+0x54>)
 8000e78:	2205      	movs	r2, #5
 8000e7a:	601a      	str	r2, [r3, #0]
  durForGreen = 3;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <main+0x58>)
 8000e7e:	2203      	movs	r2, #3
 8000e80:	601a      	str	r2, [r3, #0]
//  SCH_Add_Task(getKeyInput, 0, 1);
  SCH_Add_Task(fsm_setting, 0, 100);
 8000e82:	2264      	movs	r2, #100	; 0x64
 8000e84:	2100      	movs	r1, #0
 8000e86:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <main+0x5c>)
 8000e88:	f7ff f9fe 	bl	8000288 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run, 0, 100);
 8000e8c:	2264      	movs	r2, #100	; 0x64
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <main+0x60>)
 8000e92:	f7ff f9f9 	bl	8000288 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 0, 100);
 8000e96:	2264      	movs	r2, #100	; 0x64
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4808      	ldr	r0, [pc, #32]	; (8000ebc <main+0x64>)
 8000e9c:	f7ff f9f4 	bl	8000288 <SCH_Add_Task>

  while (1)
  {
	  SCH_Dispatch();
 8000ea0:	f7ff f9c4 	bl	800022c <SCH_Dispatch>
 8000ea4:	e7fc      	b.n	8000ea0 <main+0x48>
 8000ea6:	bf00      	nop
 8000ea8:	20000174 	.word	0x20000174
 8000eac:	2000016c 	.word	0x2000016c
 8000eb0:	20000164 	.word	0x20000164
 8000eb4:	08000b31 	.word	0x08000b31
 8000eb8:	080007b5 	.word	0x080007b5
 8000ebc:	0800095d 	.word	0x0800095d

08000ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b090      	sub	sp, #64	; 0x40
 8000ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec6:	f107 0318 	add.w	r3, r7, #24
 8000eca:	2228      	movs	r2, #40	; 0x28
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 fe64 	bl	8002b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eea:	2310      	movs	r3, #16
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef2:	f107 0318 	add.w	r3, r7, #24
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 fe74 	bl	8001be4 <HAL_RCC_OscConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f02:	f000 f8dc 	bl	80010be <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f06:	230f      	movs	r3, #15
 8000f08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f001 f8e0 	bl	80020e4 <HAL_RCC_ClockConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f2a:	f000 f8c8 	bl	80010be <Error_Handler>
  }
}
 8000f2e:	bf00      	nop
 8000f30:	3740      	adds	r7, #64	; 0x40
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3e:	f107 0308 	add.w	r3, r7, #8
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f54:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000f56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000f5e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000f6c:	2209      	movs	r2, #9
 8000f6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f7c:	4813      	ldr	r0, [pc, #76]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000f7e:	f001 fa0d 	bl	800239c <HAL_TIM_Base_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f88:	f000 f899 	bl	80010be <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f92:	f107 0308 	add.w	r3, r7, #8
 8000f96:	4619      	mov	r1, r3
 8000f98:	480c      	ldr	r0, [pc, #48]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000f9a:	f001 fb8b 	bl	80026b4 <HAL_TIM_ConfigClockSource>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fa4:	f000 f88b 	bl	80010be <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000fb6:	f001 fd63 	bl	8002a80 <HAL_TIMEx_MasterConfigSynchronization>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fc0:	f000 f87d 	bl	80010be <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000174 	.word	0x20000174

08000fd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	f107 0308 	add.w	r3, r7, #8
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	4b29      	ldr	r3, [pc, #164]	; (800108c <MX_GPIO_Init+0xbc>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a28      	ldr	r2, [pc, #160]	; (800108c <MX_GPIO_Init+0xbc>)
 8000fea:	f043 0304 	orr.w	r3, r3, #4
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b26      	ldr	r3, [pc, #152]	; (800108c <MX_GPIO_Init+0xbc>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffc:	4b23      	ldr	r3, [pc, #140]	; (800108c <MX_GPIO_Init+0xbc>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a22      	ldr	r2, [pc, #136]	; (800108c <MX_GPIO_Init+0xbc>)
 8001002:	f043 0308 	orr.w	r3, r3, #8
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b20      	ldr	r3, [pc, #128]	; (800108c <MX_GPIO_Init+0xbc>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0308 	and.w	r3, r3, #8
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG7_Pin|SEG8_Pin|SEG9_Pin|SEG10_Pin
 8001014:	2200      	movs	r2, #0
 8001016:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 800101a:	481d      	ldr	r0, [pc, #116]	; (8001090 <MX_GPIO_Init+0xc0>)
 800101c:	f000 fdb1 	bl	8001b82 <HAL_GPIO_WritePin>
                          |SEG11_Pin|SEG12_Pin|SEG13_Pin|SEG0_Pin
                          |SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin
                          |SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001020:	2200      	movs	r2, #0
 8001022:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001026:	481b      	ldr	r0, [pc, #108]	; (8001094 <MX_GPIO_Init+0xc4>)
 8001028:	f000 fdab 	bl	8001b82 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG7_Pin SEG8_Pin SEG9_Pin SEG10_Pin
                           SEG11_Pin SEG12_Pin SEG13_Pin SEG0_Pin
                           SEG1_Pin SEG2_Pin SEG3_Pin SEG4_Pin
                           SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG7_Pin|SEG8_Pin|SEG9_Pin|SEG10_Pin
 800102c:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8001030:	60bb      	str	r3, [r7, #8]
                          |SEG11_Pin|SEG12_Pin|SEG13_Pin|SEG0_Pin
                          |SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin
                          |SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001032:	2301      	movs	r3, #1
 8001034:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2302      	movs	r3, #2
 800103c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 0308 	add.w	r3, r7, #8
 8001042:	4619      	mov	r1, r3
 8001044:	4812      	ldr	r0, [pc, #72]	; (8001090 <MX_GPIO_Init+0xc0>)
 8001046:	f000 fc0b 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           R1_Pin G1_Pin Y1_Pin R0_Pin
                           G0_Pin Y0_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 800104a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800104e:	60bb      	str	r3, [r7, #8]
                          |R1_Pin|G1_Pin|Y1_Pin|R0_Pin
                          |G0_Pin|Y0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2302      	movs	r3, #2
 800105a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105c:	f107 0308 	add.w	r3, r7, #8
 8001060:	4619      	mov	r1, r3
 8001062:	480c      	ldr	r0, [pc, #48]	; (8001094 <MX_GPIO_Init+0xc4>)
 8001064:	f000 fbfc 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pins : but1_Pin but2_Pin but3_Pin but4_Pin */
  GPIO_InitStruct.Pin = but1_Pin|but2_Pin|but3_Pin|but4_Pin;
 8001068:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800106c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001072:	2301      	movs	r3, #1
 8001074:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	4619      	mov	r1, r3
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_GPIO_Init+0xc4>)
 800107e:	f000 fbef 	bl	8001860 <HAL_GPIO_Init>

}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000
 8001090:	40010800 	.word	0x40010800
 8001094:	40010c00 	.word	0x40010c00

08001098 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010a8:	d105      	bne.n	80010b6 <HAL_TIM_PeriodElapsedCallback+0x1e>
		timerRun();
 80010aa:	f000 f893 	bl	80011d4 <timerRun>
		getKeyInput();
 80010ae:	f7ff fab3 	bl	8000618 <getKeyInput>
		SCH_Update();
 80010b2:	f7ff f895 	bl	80001e0 <SCH_Update>
	}
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c2:	b672      	cpsid	i
}
 80010c4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <Error_Handler+0x8>

080010c8 <redFlag>:
		return 1;
	} else
		return 0;
}

int redFlag() {
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
	if (timerRed_flag == 1) {
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <redFlag+0x20>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d104      	bne.n	80010de <redFlag+0x16>
		timerRed_flag = 0;
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <redFlag+0x20>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
		return 1;
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <redFlag+0x18>
	} else
		return 0;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	2000009c 	.word	0x2000009c

080010ec <greenFlag>:

int greenFlag() {
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	if (timerGreen_flag == 1) {
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <greenFlag+0x20>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d104      	bne.n	8001102 <greenFlag+0x16>
		timerGreen_flag = 0;
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <greenFlag+0x20>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
		return 1;
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <greenFlag+0x18>
	} else
		return 0;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	200000a4 	.word	0x200000a4

08001110 <enableFlag>:

int enableFlag() {
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
	if (timerEnable_flag == 1) {
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <enableFlag+0x20>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d104      	bne.n	8001126 <enableFlag+0x16>
		timerEnable_flag = 0;
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <enableFlag+0x20>)
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
		return 1;
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <enableFlag+0x18>
	} else
		return 0;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	200000ac 	.word	0x200000ac

08001134 <oneSecondFlag>:

int oneSecondFlag() {
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
	if (oneSecond_flag == 1) {
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <oneSecondFlag+0x20>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d104      	bne.n	800114a <oneSecondFlag+0x16>
		oneSecond_flag = 0;
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <oneSecondFlag+0x20>)
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
		return 1;
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <oneSecondFlag+0x18>
	} else
		return 0;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	200000b4 	.word	0x200000b4

08001158 <setTimerRed>:

void setTimerRed() {
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
	timerRed_counter = durForRed * 100;
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <setTimerRed+0x1c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2264      	movs	r2, #100	; 0x64
 8001162:	fb02 f303 	mul.w	r3, r2, r3
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <setTimerRed+0x20>)
 8001168:	6013      	str	r3, [r2, #0]
//	timerRed_flag = 0;
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	2000016c 	.word	0x2000016c
 8001178:	200000a0 	.word	0x200000a0

0800117c <setTimerGreen>:

void setTimerGreen() {
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
	timerGreen_counter = durForGreen * 100;
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <setTimerGreen+0x1c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2264      	movs	r2, #100	; 0x64
 8001186:	fb02 f303 	mul.w	r3, r2, r3
 800118a:	4a04      	ldr	r2, [pc, #16]	; (800119c <setTimerGreen+0x20>)
 800118c:	6013      	str	r3, [r2, #0]
//	timerGreen_flag = 0;
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000164 	.word	0x20000164
 800119c:	200000a8 	.word	0x200000a8

080011a0 <setTimerEnable>:

void setTimerEnable() {
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
	timerEnable_counter = 50;
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <setTimerEnable+0x14>)
 80011a6:	2232      	movs	r2, #50	; 0x32
 80011a8:	601a      	str	r2, [r3, #0]
//	timerEnable_flag = 0;
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	200000b0 	.word	0x200000b0

080011b8 <setOneSecond>:

void setOneSecond(int duration) {
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	oneSecond_counter = 100;
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <setOneSecond+0x18>)
 80011c2:	2264      	movs	r2, #100	; 0x64
 80011c4:	601a      	str	r2, [r3, #0]
//	oneSecond_flag = 0;
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	200000b8 	.word	0x200000b8

080011d4 <timerRun>:
void setTimer1(int duration){
	timer1_flag = duration / TICK;
//	timer1_counter = 0;
}

void timerRun() {
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
	if (timerRed_counter > 0) {
 80011d8:	4b29      	ldr	r3, [pc, #164]	; (8001280 <timerRun+0xac>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	dd0b      	ble.n	80011f8 <timerRun+0x24>
		timerRed_counter--;
 80011e0:	4b27      	ldr	r3, [pc, #156]	; (8001280 <timerRun+0xac>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	4a26      	ldr	r2, [pc, #152]	; (8001280 <timerRun+0xac>)
 80011e8:	6013      	str	r3, [r2, #0]
		if (timerRed_counter == 0)
 80011ea:	4b25      	ldr	r3, [pc, #148]	; (8001280 <timerRun+0xac>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d102      	bne.n	80011f8 <timerRun+0x24>
			timerRed_flag = 1;
 80011f2:	4b24      	ldr	r3, [pc, #144]	; (8001284 <timerRun+0xb0>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	601a      	str	r2, [r3, #0]
	}
	if (timerGreen_counter > 0) {
 80011f8:	4b23      	ldr	r3, [pc, #140]	; (8001288 <timerRun+0xb4>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	dd0b      	ble.n	8001218 <timerRun+0x44>
		timerGreen_counter--;
 8001200:	4b21      	ldr	r3, [pc, #132]	; (8001288 <timerRun+0xb4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3b01      	subs	r3, #1
 8001206:	4a20      	ldr	r2, [pc, #128]	; (8001288 <timerRun+0xb4>)
 8001208:	6013      	str	r3, [r2, #0]
		if (timerGreen_counter == 0)
 800120a:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <timerRun+0xb4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d102      	bne.n	8001218 <timerRun+0x44>
			timerGreen_flag = 1;
 8001212:	4b1e      	ldr	r3, [pc, #120]	; (800128c <timerRun+0xb8>)
 8001214:	2201      	movs	r2, #1
 8001216:	601a      	str	r2, [r3, #0]
	}
	if (timerEnable_counter > 0) {
 8001218:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <timerRun+0xbc>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	dd0b      	ble.n	8001238 <timerRun+0x64>
		timerEnable_counter--;
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <timerRun+0xbc>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	3b01      	subs	r3, #1
 8001226:	4a1a      	ldr	r2, [pc, #104]	; (8001290 <timerRun+0xbc>)
 8001228:	6013      	str	r3, [r2, #0]
		if (timerEnable_counter == 0)
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <timerRun+0xbc>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d102      	bne.n	8001238 <timerRun+0x64>
			timerEnable_flag = 1;
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <timerRun+0xc0>)
 8001234:	2201      	movs	r2, #1
 8001236:	601a      	str	r2, [r3, #0]
	}
	if (oneSecond_counter > 0) {
 8001238:	4b17      	ldr	r3, [pc, #92]	; (8001298 <timerRun+0xc4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	dd0b      	ble.n	8001258 <timerRun+0x84>
		oneSecond_counter--;
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <timerRun+0xc4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3b01      	subs	r3, #1
 8001246:	4a14      	ldr	r2, [pc, #80]	; (8001298 <timerRun+0xc4>)
 8001248:	6013      	str	r3, [r2, #0]
		if (oneSecond_counter == 0)
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <timerRun+0xc4>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d102      	bne.n	8001258 <timerRun+0x84>
			oneSecond_flag = 1;
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <timerRun+0xc8>)
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]
	}
	if (timer1_counter > 0) {
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <timerRun+0xcc>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	dd0b      	ble.n	8001278 <timerRun+0xa4>
		timer1_counter--;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <timerRun+0xcc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	3b01      	subs	r3, #1
 8001266:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <timerRun+0xcc>)
 8001268:	6013      	str	r3, [r2, #0]
		if (timer1_counter == 0)
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <timerRun+0xcc>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d102      	bne.n	8001278 <timerRun+0xa4>
			timer1_flag = 1;
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <timerRun+0xd0>)
 8001274:	2201      	movs	r2, #1
 8001276:	601a      	str	r2, [r3, #0]
	}
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	200000a0 	.word	0x200000a0
 8001284:	2000009c 	.word	0x2000009c
 8001288:	200000a8 	.word	0x200000a8
 800128c:	200000a4 	.word	0x200000a4
 8001290:	200000b0 	.word	0x200000b0
 8001294:	200000ac 	.word	0x200000ac
 8001298:	200000b8 	.word	0x200000b8
 800129c:	200000b4 	.word	0x200000b4
 80012a0:	200000c0 	.word	0x200000c0
 80012a4:	200000bc 	.word	0x200000bc

080012a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <HAL_MspInit+0x5c>)
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	4a14      	ldr	r2, [pc, #80]	; (8001304 <HAL_MspInit+0x5c>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6193      	str	r3, [r2, #24]
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_MspInit+0x5c>)
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <HAL_MspInit+0x5c>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <HAL_MspInit+0x5c>)
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d0:	61d3      	str	r3, [r2, #28]
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <HAL_MspInit+0x5c>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <HAL_MspInit+0x60>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	4a04      	ldr	r2, [pc, #16]	; (8001308 <HAL_MspInit+0x60>)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fa:	bf00      	nop
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	40021000 	.word	0x40021000
 8001308:	40010000 	.word	0x40010000

0800130c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800131c:	d113      	bne.n	8001346 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <HAL_TIM_Base_MspInit+0x44>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <HAL_TIM_Base_MspInit+0x44>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	61d3      	str	r3, [r2, #28]
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <HAL_TIM_Base_MspInit+0x44>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	201c      	movs	r0, #28
 800133c:	f000 fa59 	bl	80017f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001340:	201c      	movs	r0, #28
 8001342:	f000 fa72 	bl	800182a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000

08001354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <NMI_Handler+0x4>

0800135a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <HardFault_Handler+0x4>

08001360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <MemManage_Handler+0x4>

08001366 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <BusFault_Handler+0x4>

0800136c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <UsageFault_Handler+0x4>

08001372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr

0800137e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800139a:	f000 f937 	bl	800160c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <TIM2_IRQHandler+0x10>)
 80013aa:	f001 f893 	bl	80024d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000174 	.word	0x20000174

080013b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <led_red_and_green>:
 */

#include "traffic_light.h"
#include "main.h"

void led_red_and_green(){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	//TODO
	HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	2180      	movs	r1, #128	; 0x80
 80013cc:	480f      	ldr	r0, [pc, #60]	; (800140c <led_red_and_green+0x48>)
 80013ce:	f000 fbd8 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 80013d2:	2201      	movs	r2, #1
 80013d4:	2120      	movs	r1, #32
 80013d6:	480d      	ldr	r0, [pc, #52]	; (800140c <led_red_and_green+0x48>)
 80013d8:	f000 fbd3 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e2:	480a      	ldr	r0, [pc, #40]	; (800140c <led_red_and_green+0x48>)
 80013e4:	f000 fbcd 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ee:	4807      	ldr	r0, [pc, #28]	; (800140c <led_red_and_green+0x48>)
 80013f0:	f000 fbc7 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2110      	movs	r1, #16
 80013f8:	4804      	ldr	r0, [pc, #16]	; (800140c <led_red_and_green+0x48>)
 80013fa:	f000 fbc2 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	2140      	movs	r1, #64	; 0x40
 8001402:	4802      	ldr	r0, [pc, #8]	; (800140c <led_red_and_green+0x48>)
 8001404:	f000 fbbd 	bl	8001b82 <HAL_GPIO_WritePin>
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40010c00 	.word	0x40010c00

08001410 <led_green_and_red>:
	HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, RESET);
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
}

void led_green_and_red(){
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	//TODO
	HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	2180      	movs	r1, #128	; 0x80
 8001418:	480f      	ldr	r0, [pc, #60]	; (8001458 <led_green_and_red+0x48>)
 800141a:	f000 fbb2 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	2120      	movs	r1, #32
 8001422:	480d      	ldr	r0, [pc, #52]	; (8001458 <led_green_and_red+0x48>)
 8001424:	f000 fbad 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 8001428:	2201      	movs	r2, #1
 800142a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800142e:	480a      	ldr	r0, [pc, #40]	; (8001458 <led_green_and_red+0x48>)
 8001430:	f000 fba7 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 7100 	mov.w	r1, #512	; 0x200
 800143a:	4807      	ldr	r0, [pc, #28]	; (8001458 <led_green_and_red+0x48>)
 800143c:	f000 fba1 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8001440:	2201      	movs	r2, #1
 8001442:	2110      	movs	r1, #16
 8001444:	4804      	ldr	r0, [pc, #16]	; (8001458 <led_green_and_red+0x48>)
 8001446:	f000 fb9c 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	2140      	movs	r1, #64	; 0x40
 800144e:	4802      	ldr	r0, [pc, #8]	; (8001458 <led_green_and_red+0x48>)
 8001450:	f000 fb97 	bl	8001b82 <HAL_GPIO_WritePin>
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40010c00 	.word	0x40010c00

0800145c <led_red>:
	HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, SET);
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
}

void led_red(){
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(R0_GPIO_Port, R0_Pin);
 8001460:	2180      	movs	r1, #128	; 0x80
 8001462:	480f      	ldr	r0, [pc, #60]	; (80014a0 <led_red+0x44>)
 8001464:	f000 fba5 	bl	8001bb2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(R1_GPIO_Port, R1_Pin);
 8001468:	2110      	movs	r1, #16
 800146a:	480d      	ldr	r0, [pc, #52]	; (80014a0 <led_red+0x44>)
 800146c:	f000 fba1 	bl	8001bb2 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001476:	480a      	ldr	r0, [pc, #40]	; (80014a0 <led_red+0x44>)
 8001478:	f000 fb83 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	2120      	movs	r1, #32
 8001480:	4807      	ldr	r0, [pc, #28]	; (80014a0 <led_red+0x44>)
 8001482:	f000 fb7e 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	f44f 7100 	mov.w	r1, #512	; 0x200
 800148c:	4804      	ldr	r0, [pc, #16]	; (80014a0 <led_red+0x44>)
 800148e:	f000 fb78 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	2140      	movs	r1, #64	; 0x40
 8001496:	4802      	ldr	r0, [pc, #8]	; (80014a0 <led_red+0x44>)
 8001498:	f000 fb73 	bl	8001b82 <HAL_GPIO_WritePin>
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40010c00 	.word	0x40010c00

080014a4 <led_green>:

void led_green(){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(G0_GPIO_Port, G0_Pin);
 80014a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ac:	480e      	ldr	r0, [pc, #56]	; (80014e8 <led_green+0x44>)
 80014ae:	f000 fb80 	bl	8001bb2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(G1_GPIO_Port, G1_Pin);
 80014b2:	2120      	movs	r1, #32
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <led_green+0x44>)
 80014b6:	f000 fb7c 	bl	8001bb2 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2180      	movs	r1, #128	; 0x80
 80014be:	480a      	ldr	r0, [pc, #40]	; (80014e8 <led_green+0x44>)
 80014c0:	f000 fb5f 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2110      	movs	r1, #16
 80014c8:	4807      	ldr	r0, [pc, #28]	; (80014e8 <led_green+0x44>)
 80014ca:	f000 fb5a 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014d4:	4804      	ldr	r0, [pc, #16]	; (80014e8 <led_green+0x44>)
 80014d6:	f000 fb54 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	2140      	movs	r1, #64	; 0x40
 80014de:	4802      	ldr	r0, [pc, #8]	; (80014e8 <led_green+0x44>)
 80014e0:	f000 fb4f 	bl	8001b82 <HAL_GPIO_WritePin>
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40010c00 	.word	0x40010c00

080014ec <led_yellow>:

void led_yellow(){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Y0_GPIO_Port, Y0_Pin);
 80014f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f4:	480e      	ldr	r0, [pc, #56]	; (8001530 <led_yellow+0x44>)
 80014f6:	f000 fb5c 	bl	8001bb2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(Y1_GPIO_Port, Y1_Pin);
 80014fa:	2140      	movs	r1, #64	; 0x40
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <led_yellow+0x44>)
 80014fe:	f000 fb58 	bl	8001bb2 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	480a      	ldr	r0, [pc, #40]	; (8001530 <led_yellow+0x44>)
 8001508:	f000 fb3b 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	2110      	movs	r1, #16
 8001510:	4807      	ldr	r0, [pc, #28]	; (8001530 <led_yellow+0x44>)
 8001512:	f000 fb36 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 7180 	mov.w	r1, #256	; 0x100
 800151c:	4804      	ldr	r0, [pc, #16]	; (8001530 <led_yellow+0x44>)
 800151e:	f000 fb30 	bl	8001b82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	2120      	movs	r1, #32
 8001526:	4802      	ldr	r0, [pc, #8]	; (8001530 <led_yellow+0x44>)
 8001528:	f000 fb2b 	bl	8001b82 <HAL_GPIO_WritePin>
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40010c00 	.word	0x40010c00

08001534 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001534:	f7ff ff40 	bl	80013b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001538:	480b      	ldr	r0, [pc, #44]	; (8001568 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800153a:	490c      	ldr	r1, [pc, #48]	; (800156c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800153c:	4a0c      	ldr	r2, [pc, #48]	; (8001570 <LoopFillZerobss+0x16>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001540:	e002      	b.n	8001548 <LoopCopyDataInit>

08001542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001546:	3304      	adds	r3, #4

08001548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800154c:	d3f9      	bcc.n	8001542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154e:	4a09      	ldr	r2, [pc, #36]	; (8001574 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001550:	4c09      	ldr	r4, [pc, #36]	; (8001578 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001554:	e001      	b.n	800155a <LoopFillZerobss>

08001556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001558:	3204      	adds	r2, #4

0800155a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800155c:	d3fb      	bcc.n	8001556 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800155e:	f001 faf9 	bl	8002b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001562:	f7ff fc79 	bl	8000e58 <main>
  bx lr
 8001566:	4770      	bx	lr
  ldr r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800156c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001570:	08002bf0 	.word	0x08002bf0
  ldr r2, =_sbss
 8001574:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001578:	200001c0 	.word	0x200001c0

0800157c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC1_2_IRQHandler>
	...

08001580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <HAL_Init+0x28>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <HAL_Init+0x28>)
 800158a:	f043 0310 	orr.w	r3, r3, #16
 800158e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001590:	2003      	movs	r0, #3
 8001592:	f000 f923 	bl	80017dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001596:	200f      	movs	r0, #15
 8001598:	f000 f808 	bl	80015ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800159c:	f7ff fe84 	bl	80012a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40022000 	.word	0x40022000

080015ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <HAL_InitTick+0x54>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_InitTick+0x58>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 f93b 	bl	8001846 <HAL_SYSTICK_Config>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00e      	b.n	80015f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b0f      	cmp	r3, #15
 80015de:	d80a      	bhi.n	80015f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e0:	2200      	movs	r2, #0
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	f000 f903 	bl	80017f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ec:	4a06      	ldr	r2, [pc, #24]	; (8001608 <HAL_InitTick+0x5c>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	e000      	b.n	80015f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000060 	.word	0x20000060
 8001604:	20000068 	.word	0x20000068
 8001608:	20000064 	.word	0x20000064

0800160c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_IncTick+0x1c>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4b05      	ldr	r3, [pc, #20]	; (800162c <HAL_IncTick+0x20>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4413      	add	r3, r2
 800161c:	4a03      	ldr	r2, [pc, #12]	; (800162c <HAL_IncTick+0x20>)
 800161e:	6013      	str	r3, [r2, #0]
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	20000068 	.word	0x20000068
 800162c:	200001bc 	.word	0x200001bc

08001630 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return uwTick;
 8001634:	4b02      	ldr	r3, [pc, #8]	; (8001640 <HAL_GetTick+0x10>)
 8001636:	681b      	ldr	r3, [r3, #0]
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	200001bc 	.word	0x200001bc

08001644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <__NVIC_SetPriorityGrouping+0x44>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001660:	4013      	ands	r3, r2
 8001662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800166c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001676:	4a04      	ldr	r2, [pc, #16]	; (8001688 <__NVIC_SetPriorityGrouping+0x44>)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	60d3      	str	r3, [r2, #12]
}
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	0a1b      	lsrs	r3, r3, #8
 8001696:	f003 0307 	and.w	r3, r3, #7
}
 800169a:	4618      	mov	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	db0b      	blt.n	80016d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	f003 021f 	and.w	r2, r3, #31
 80016c0:	4906      	ldr	r1, [pc, #24]	; (80016dc <__NVIC_EnableIRQ+0x34>)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	095b      	lsrs	r3, r3, #5
 80016c8:	2001      	movs	r0, #1
 80016ca:	fa00 f202 	lsl.w	r2, r0, r2
 80016ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	e000e100 	.word	0xe000e100

080016e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	6039      	str	r1, [r7, #0]
 80016ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	db0a      	blt.n	800170a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	490c      	ldr	r1, [pc, #48]	; (800172c <__NVIC_SetPriority+0x4c>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	0112      	lsls	r2, r2, #4
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	440b      	add	r3, r1
 8001704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001708:	e00a      	b.n	8001720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4908      	ldr	r1, [pc, #32]	; (8001730 <__NVIC_SetPriority+0x50>)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	3b04      	subs	r3, #4
 8001718:	0112      	lsls	r2, r2, #4
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	440b      	add	r3, r1
 800171e:	761a      	strb	r2, [r3, #24]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000e100 	.word	0xe000e100
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001734:	b480      	push	{r7}
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f1c3 0307 	rsb	r3, r3, #7
 800174e:	2b04      	cmp	r3, #4
 8001750:	bf28      	it	cs
 8001752:	2304      	movcs	r3, #4
 8001754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3304      	adds	r3, #4
 800175a:	2b06      	cmp	r3, #6
 800175c:	d902      	bls.n	8001764 <NVIC_EncodePriority+0x30>
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3b03      	subs	r3, #3
 8001762:	e000      	b.n	8001766 <NVIC_EncodePriority+0x32>
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	f04f 32ff 	mov.w	r2, #4294967295
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43da      	mvns	r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	401a      	ands	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800177c:	f04f 31ff 	mov.w	r1, #4294967295
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	fa01 f303 	lsl.w	r3, r1, r3
 8001786:	43d9      	mvns	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	4313      	orrs	r3, r2
         );
}
 800178e:	4618      	mov	r0, r3
 8001790:	3724      	adds	r7, #36	; 0x24
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a8:	d301      	bcc.n	80017ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00f      	b.n	80017ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <SysTick_Config+0x40>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b6:	210f      	movs	r1, #15
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f7ff ff90 	bl	80016e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <SysTick_Config+0x40>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <SysTick_Config+0x40>)
 80017c8:	2207      	movs	r2, #7
 80017ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	e000e010 	.word	0xe000e010

080017dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ff2d 	bl	8001644 <__NVIC_SetPriorityGrouping>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001804:	f7ff ff42 	bl	800168c <__NVIC_GetPriorityGrouping>
 8001808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	68b9      	ldr	r1, [r7, #8]
 800180e:	6978      	ldr	r0, [r7, #20]
 8001810:	f7ff ff90 	bl	8001734 <NVIC_EncodePriority>
 8001814:	4602      	mov	r2, r0
 8001816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff5f 	bl	80016e0 <__NVIC_SetPriority>
}
 8001822:	bf00      	nop
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff35 	bl	80016a8 <__NVIC_EnableIRQ>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ffa2 	bl	8001798 <SysTick_Config>
 8001854:	4603      	mov	r3, r0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001860:	b480      	push	{r7}
 8001862:	b08b      	sub	sp, #44	; 0x2c
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800186a:	2300      	movs	r3, #0
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800186e:	2300      	movs	r3, #0
 8001870:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001872:	e148      	b.n	8001b06 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001874:	2201      	movs	r2, #1
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	429a      	cmp	r2, r3
 800188e:	f040 8137 	bne.w	8001b00 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	4aa3      	ldr	r2, [pc, #652]	; (8001b24 <HAL_GPIO_Init+0x2c4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d05e      	beq.n	800195a <HAL_GPIO_Init+0xfa>
 800189c:	4aa1      	ldr	r2, [pc, #644]	; (8001b24 <HAL_GPIO_Init+0x2c4>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d875      	bhi.n	800198e <HAL_GPIO_Init+0x12e>
 80018a2:	4aa1      	ldr	r2, [pc, #644]	; (8001b28 <HAL_GPIO_Init+0x2c8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d058      	beq.n	800195a <HAL_GPIO_Init+0xfa>
 80018a8:	4a9f      	ldr	r2, [pc, #636]	; (8001b28 <HAL_GPIO_Init+0x2c8>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d86f      	bhi.n	800198e <HAL_GPIO_Init+0x12e>
 80018ae:	4a9f      	ldr	r2, [pc, #636]	; (8001b2c <HAL_GPIO_Init+0x2cc>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d052      	beq.n	800195a <HAL_GPIO_Init+0xfa>
 80018b4:	4a9d      	ldr	r2, [pc, #628]	; (8001b2c <HAL_GPIO_Init+0x2cc>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d869      	bhi.n	800198e <HAL_GPIO_Init+0x12e>
 80018ba:	4a9d      	ldr	r2, [pc, #628]	; (8001b30 <HAL_GPIO_Init+0x2d0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d04c      	beq.n	800195a <HAL_GPIO_Init+0xfa>
 80018c0:	4a9b      	ldr	r2, [pc, #620]	; (8001b30 <HAL_GPIO_Init+0x2d0>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d863      	bhi.n	800198e <HAL_GPIO_Init+0x12e>
 80018c6:	4a9b      	ldr	r2, [pc, #620]	; (8001b34 <HAL_GPIO_Init+0x2d4>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d046      	beq.n	800195a <HAL_GPIO_Init+0xfa>
 80018cc:	4a99      	ldr	r2, [pc, #612]	; (8001b34 <HAL_GPIO_Init+0x2d4>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d85d      	bhi.n	800198e <HAL_GPIO_Init+0x12e>
 80018d2:	2b12      	cmp	r3, #18
 80018d4:	d82a      	bhi.n	800192c <HAL_GPIO_Init+0xcc>
 80018d6:	2b12      	cmp	r3, #18
 80018d8:	d859      	bhi.n	800198e <HAL_GPIO_Init+0x12e>
 80018da:	a201      	add	r2, pc, #4	; (adr r2, 80018e0 <HAL_GPIO_Init+0x80>)
 80018dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e0:	0800195b 	.word	0x0800195b
 80018e4:	08001935 	.word	0x08001935
 80018e8:	08001947 	.word	0x08001947
 80018ec:	08001989 	.word	0x08001989
 80018f0:	0800198f 	.word	0x0800198f
 80018f4:	0800198f 	.word	0x0800198f
 80018f8:	0800198f 	.word	0x0800198f
 80018fc:	0800198f 	.word	0x0800198f
 8001900:	0800198f 	.word	0x0800198f
 8001904:	0800198f 	.word	0x0800198f
 8001908:	0800198f 	.word	0x0800198f
 800190c:	0800198f 	.word	0x0800198f
 8001910:	0800198f 	.word	0x0800198f
 8001914:	0800198f 	.word	0x0800198f
 8001918:	0800198f 	.word	0x0800198f
 800191c:	0800198f 	.word	0x0800198f
 8001920:	0800198f 	.word	0x0800198f
 8001924:	0800193d 	.word	0x0800193d
 8001928:	08001951 	.word	0x08001951
 800192c:	4a82      	ldr	r2, [pc, #520]	; (8001b38 <HAL_GPIO_Init+0x2d8>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d013      	beq.n	800195a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001932:	e02c      	b.n	800198e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	623b      	str	r3, [r7, #32]
          break;
 800193a:	e029      	b.n	8001990 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	3304      	adds	r3, #4
 8001942:	623b      	str	r3, [r7, #32]
          break;
 8001944:	e024      	b.n	8001990 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	3308      	adds	r3, #8
 800194c:	623b      	str	r3, [r7, #32]
          break;
 800194e:	e01f      	b.n	8001990 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	330c      	adds	r3, #12
 8001956:	623b      	str	r3, [r7, #32]
          break;
 8001958:	e01a      	b.n	8001990 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d102      	bne.n	8001968 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001962:	2304      	movs	r3, #4
 8001964:	623b      	str	r3, [r7, #32]
          break;
 8001966:	e013      	b.n	8001990 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d105      	bne.n	800197c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001970:	2308      	movs	r3, #8
 8001972:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	611a      	str	r2, [r3, #16]
          break;
 800197a:	e009      	b.n	8001990 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800197c:	2308      	movs	r3, #8
 800197e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	615a      	str	r2, [r3, #20]
          break;
 8001986:	e003      	b.n	8001990 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001988:	2300      	movs	r3, #0
 800198a:	623b      	str	r3, [r7, #32]
          break;
 800198c:	e000      	b.n	8001990 <HAL_GPIO_Init+0x130>
          break;
 800198e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	2bff      	cmp	r3, #255	; 0xff
 8001994:	d801      	bhi.n	800199a <HAL_GPIO_Init+0x13a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	e001      	b.n	800199e <HAL_GPIO_Init+0x13e>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3304      	adds	r3, #4
 800199e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	2bff      	cmp	r3, #255	; 0xff
 80019a4:	d802      	bhi.n	80019ac <HAL_GPIO_Init+0x14c>
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	e002      	b.n	80019b2 <HAL_GPIO_Init+0x152>
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	3b08      	subs	r3, #8
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	210f      	movs	r1, #15
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	fa01 f303 	lsl.w	r3, r1, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	401a      	ands	r2, r3
 80019c4:	6a39      	ldr	r1, [r7, #32]
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	fa01 f303 	lsl.w	r3, r1, r3
 80019cc:	431a      	orrs	r2, r3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8090 	beq.w	8001b00 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019e0:	4b56      	ldr	r3, [pc, #344]	; (8001b3c <HAL_GPIO_Init+0x2dc>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	4a55      	ldr	r2, [pc, #340]	; (8001b3c <HAL_GPIO_Init+0x2dc>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6193      	str	r3, [r2, #24]
 80019ec:	4b53      	ldr	r3, [pc, #332]	; (8001b3c <HAL_GPIO_Init+0x2dc>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019f8:	4a51      	ldr	r2, [pc, #324]	; (8001b40 <HAL_GPIO_Init+0x2e0>)
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	3302      	adds	r3, #2
 8001a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	220f      	movs	r2, #15
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a49      	ldr	r2, [pc, #292]	; (8001b44 <HAL_GPIO_Init+0x2e4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d00d      	beq.n	8001a40 <HAL_GPIO_Init+0x1e0>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a48      	ldr	r2, [pc, #288]	; (8001b48 <HAL_GPIO_Init+0x2e8>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d007      	beq.n	8001a3c <HAL_GPIO_Init+0x1dc>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a47      	ldr	r2, [pc, #284]	; (8001b4c <HAL_GPIO_Init+0x2ec>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d101      	bne.n	8001a38 <HAL_GPIO_Init+0x1d8>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e004      	b.n	8001a42 <HAL_GPIO_Init+0x1e2>
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e002      	b.n	8001a42 <HAL_GPIO_Init+0x1e2>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <HAL_GPIO_Init+0x1e2>
 8001a40:	2300      	movs	r3, #0
 8001a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a44:	f002 0203 	and.w	r2, r2, #3
 8001a48:	0092      	lsls	r2, r2, #2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a52:	493b      	ldr	r1, [pc, #236]	; (8001b40 <HAL_GPIO_Init+0x2e0>)
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3302      	adds	r3, #2
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d006      	beq.n	8001a7a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a6c:	4b38      	ldr	r3, [pc, #224]	; (8001b50 <HAL_GPIO_Init+0x2f0>)
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	4937      	ldr	r1, [pc, #220]	; (8001b50 <HAL_GPIO_Init+0x2f0>)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	608b      	str	r3, [r1, #8]
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a7a:	4b35      	ldr	r3, [pc, #212]	; (8001b50 <HAL_GPIO_Init+0x2f0>)
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	4933      	ldr	r1, [pc, #204]	; (8001b50 <HAL_GPIO_Init+0x2f0>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d006      	beq.n	8001aa2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a94:	4b2e      	ldr	r3, [pc, #184]	; (8001b50 <HAL_GPIO_Init+0x2f0>)
 8001a96:	68da      	ldr	r2, [r3, #12]
 8001a98:	492d      	ldr	r1, [pc, #180]	; (8001b50 <HAL_GPIO_Init+0x2f0>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	60cb      	str	r3, [r1, #12]
 8001aa0:	e006      	b.n	8001ab0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aa2:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <HAL_GPIO_Init+0x2f0>)
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	4929      	ldr	r1, [pc, #164]	; (8001b50 <HAL_GPIO_Init+0x2f0>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d006      	beq.n	8001aca <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001abc:	4b24      	ldr	r3, [pc, #144]	; (8001b50 <HAL_GPIO_Init+0x2f0>)
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	4923      	ldr	r1, [pc, #140]	; (8001b50 <HAL_GPIO_Init+0x2f0>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aca:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <HAL_GPIO_Init+0x2f0>)
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	491f      	ldr	r1, [pc, #124]	; (8001b50 <HAL_GPIO_Init+0x2f0>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d006      	beq.n	8001af2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <HAL_GPIO_Init+0x2f0>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4919      	ldr	r1, [pc, #100]	; (8001b50 <HAL_GPIO_Init+0x2f0>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	600b      	str	r3, [r1, #0]
 8001af0:	e006      	b.n	8001b00 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001af2:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <HAL_GPIO_Init+0x2f0>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	4915      	ldr	r1, [pc, #84]	; (8001b50 <HAL_GPIO_Init+0x2f0>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	3301      	adds	r3, #1
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f47f aeaf 	bne.w	8001874 <HAL_GPIO_Init+0x14>
  }
}
 8001b16:	bf00      	nop
 8001b18:	bf00      	nop
 8001b1a:	372c      	adds	r7, #44	; 0x2c
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	10320000 	.word	0x10320000
 8001b28:	10310000 	.word	0x10310000
 8001b2c:	10220000 	.word	0x10220000
 8001b30:	10210000 	.word	0x10210000
 8001b34:	10120000 	.word	0x10120000
 8001b38:	10110000 	.word	0x10110000
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40010000 	.word	0x40010000
 8001b44:	40010800 	.word	0x40010800
 8001b48:	40010c00 	.word	0x40010c00
 8001b4c:	40011000 	.word	0x40011000
 8001b50:	40010400 	.word	0x40010400

08001b54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	887b      	ldrh	r3, [r7, #2]
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d002      	beq.n	8001b72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
 8001b70:	e001      	b.n	8001b76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b72:	2300      	movs	r3, #0
 8001b74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr

08001b82 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	807b      	strh	r3, [r7, #2]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b92:	787b      	ldrb	r3, [r7, #1]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b98:	887a      	ldrh	r2, [r7, #2]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b9e:	e003      	b.n	8001ba8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ba0:	887b      	ldrh	r3, [r7, #2]
 8001ba2:	041a      	lsls	r2, r3, #16
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	611a      	str	r2, [r3, #16]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b085      	sub	sp, #20
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	460b      	mov	r3, r1
 8001bbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bc4:	887a      	ldrh	r2, [r7, #2]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	041a      	lsls	r2, r3, #16
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	43d9      	mvns	r1, r3
 8001bd0:	887b      	ldrh	r3, [r7, #2]
 8001bd2:	400b      	ands	r3, r1
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	611a      	str	r2, [r3, #16]
}
 8001bda:	bf00      	nop
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr

08001be4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e26c      	b.n	80020d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 8087 	beq.w	8001d12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c04:	4b92      	ldr	r3, [pc, #584]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 030c 	and.w	r3, r3, #12
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d00c      	beq.n	8001c2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c10:	4b8f      	ldr	r3, [pc, #572]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d112      	bne.n	8001c42 <HAL_RCC_OscConfig+0x5e>
 8001c1c:	4b8c      	ldr	r3, [pc, #560]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c28:	d10b      	bne.n	8001c42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2a:	4b89      	ldr	r3, [pc, #548]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d06c      	beq.n	8001d10 <HAL_RCC_OscConfig+0x12c>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d168      	bne.n	8001d10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e246      	b.n	80020d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c4a:	d106      	bne.n	8001c5a <HAL_RCC_OscConfig+0x76>
 8001c4c:	4b80      	ldr	r3, [pc, #512]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a7f      	ldr	r2, [pc, #508]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	e02e      	b.n	8001cb8 <HAL_RCC_OscConfig+0xd4>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x98>
 8001c62:	4b7b      	ldr	r3, [pc, #492]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a7a      	ldr	r2, [pc, #488]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	4b78      	ldr	r3, [pc, #480]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a77      	ldr	r2, [pc, #476]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e01d      	b.n	8001cb8 <HAL_RCC_OscConfig+0xd4>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0xbc>
 8001c86:	4b72      	ldr	r3, [pc, #456]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a71      	ldr	r2, [pc, #452]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b6f      	ldr	r3, [pc, #444]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a6e      	ldr	r2, [pc, #440]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e00b      	b.n	8001cb8 <HAL_RCC_OscConfig+0xd4>
 8001ca0:	4b6b      	ldr	r3, [pc, #428]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a6a      	ldr	r2, [pc, #424]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b68      	ldr	r3, [pc, #416]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a67      	ldr	r2, [pc, #412]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d013      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fcb6 	bl	8001630 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff fcb2 	bl	8001630 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	; 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e1fa      	b.n	80020d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	4b5d      	ldr	r3, [pc, #372]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0xe4>
 8001ce6:	e014      	b.n	8001d12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fca2 	bl	8001630 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7ff fc9e 	bl	8001630 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	; 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e1e6      	b.n	80020d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d02:	4b53      	ldr	r3, [pc, #332]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x10c>
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d063      	beq.n	8001de6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d1e:	4b4c      	ldr	r3, [pc, #304]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00b      	beq.n	8001d42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d2a:	4b49      	ldr	r3, [pc, #292]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d11c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x18c>
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d116      	bne.n	8001d70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d42:	4b43      	ldr	r3, [pc, #268]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_RCC_OscConfig+0x176>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d001      	beq.n	8001d5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e1ba      	b.n	80020d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5a:	4b3d      	ldr	r3, [pc, #244]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4939      	ldr	r1, [pc, #228]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6e:	e03a      	b.n	8001de6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d020      	beq.n	8001dba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d78:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <HAL_RCC_OscConfig+0x270>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7e:	f7ff fc57 	bl	8001630 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d86:	f7ff fc53 	bl	8001630 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e19b      	b.n	80020d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d98:	4b2d      	ldr	r3, [pc, #180]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da4:	4b2a      	ldr	r3, [pc, #168]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4927      	ldr	r1, [pc, #156]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	600b      	str	r3, [r1, #0]
 8001db8:	e015      	b.n	8001de6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dba:	4b26      	ldr	r3, [pc, #152]	; (8001e54 <HAL_RCC_OscConfig+0x270>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fc36 	bl	8001630 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc8:	f7ff fc32 	bl	8001630 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e17a      	b.n	80020d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dda:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d03a      	beq.n	8001e68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d019      	beq.n	8001e2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfa:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <HAL_RCC_OscConfig+0x274>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e00:	f7ff fc16 	bl	8001630 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e08:	f7ff fc12 	bl	8001630 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e15a      	b.n	80020d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e26:	2001      	movs	r0, #1
 8001e28:	f000 fa9a 	bl	8002360 <RCC_Delay>
 8001e2c:	e01c      	b.n	8001e68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <HAL_RCC_OscConfig+0x274>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e34:	f7ff fbfc 	bl	8001630 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3a:	e00f      	b.n	8001e5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e3c:	f7ff fbf8 	bl	8001630 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d908      	bls.n	8001e5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e140      	b.n	80020d0 <HAL_RCC_OscConfig+0x4ec>
 8001e4e:	bf00      	nop
 8001e50:	40021000 	.word	0x40021000
 8001e54:	42420000 	.word	0x42420000
 8001e58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5c:	4b9e      	ldr	r3, [pc, #632]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1e9      	bne.n	8001e3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80a6 	beq.w	8001fc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7a:	4b97      	ldr	r3, [pc, #604]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10d      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e86:	4b94      	ldr	r3, [pc, #592]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	4a93      	ldr	r2, [pc, #588]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8001e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e90:	61d3      	str	r3, [r2, #28]
 8001e92:	4b91      	ldr	r3, [pc, #580]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea2:	4b8e      	ldr	r3, [pc, #568]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d118      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eae:	4b8b      	ldr	r3, [pc, #556]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a8a      	ldr	r2, [pc, #552]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eba:	f7ff fbb9 	bl	8001630 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec2:	f7ff fbb5 	bl	8001630 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b64      	cmp	r3, #100	; 0x64
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e0fd      	b.n	80020d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed4:	4b81      	ldr	r3, [pc, #516]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x312>
 8001ee8:	4b7b      	ldr	r3, [pc, #492]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4a7a      	ldr	r2, [pc, #488]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6213      	str	r3, [r2, #32]
 8001ef4:	e02d      	b.n	8001f52 <HAL_RCC_OscConfig+0x36e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x334>
 8001efe:	4b76      	ldr	r3, [pc, #472]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4a75      	ldr	r2, [pc, #468]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	f023 0301 	bic.w	r3, r3, #1
 8001f08:	6213      	str	r3, [r2, #32]
 8001f0a:	4b73      	ldr	r3, [pc, #460]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	4a72      	ldr	r2, [pc, #456]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	f023 0304 	bic.w	r3, r3, #4
 8001f14:	6213      	str	r3, [r2, #32]
 8001f16:	e01c      	b.n	8001f52 <HAL_RCC_OscConfig+0x36e>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b05      	cmp	r3, #5
 8001f1e:	d10c      	bne.n	8001f3a <HAL_RCC_OscConfig+0x356>
 8001f20:	4b6d      	ldr	r3, [pc, #436]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	4a6c      	ldr	r2, [pc, #432]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f26:	f043 0304 	orr.w	r3, r3, #4
 8001f2a:	6213      	str	r3, [r2, #32]
 8001f2c:	4b6a      	ldr	r3, [pc, #424]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	4a69      	ldr	r2, [pc, #420]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6213      	str	r3, [r2, #32]
 8001f38:	e00b      	b.n	8001f52 <HAL_RCC_OscConfig+0x36e>
 8001f3a:	4b67      	ldr	r3, [pc, #412]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4a66      	ldr	r2, [pc, #408]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f40:	f023 0301 	bic.w	r3, r3, #1
 8001f44:	6213      	str	r3, [r2, #32]
 8001f46:	4b64      	ldr	r3, [pc, #400]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4a63      	ldr	r2, [pc, #396]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f4c:	f023 0304 	bic.w	r3, r3, #4
 8001f50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d015      	beq.n	8001f86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5a:	f7ff fb69 	bl	8001630 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f60:	e00a      	b.n	8001f78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f7ff fb65 	bl	8001630 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e0ab      	b.n	80020d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f78:	4b57      	ldr	r3, [pc, #348]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0ee      	beq.n	8001f62 <HAL_RCC_OscConfig+0x37e>
 8001f84:	e014      	b.n	8001fb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f86:	f7ff fb53 	bl	8001630 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f8c:	e00a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7ff fb4f 	bl	8001630 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e095      	b.n	80020d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa4:	4b4c      	ldr	r3, [pc, #304]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1ee      	bne.n	8001f8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fb0:	7dfb      	ldrb	r3, [r7, #23]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d105      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb6:	4b48      	ldr	r3, [pc, #288]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	4a47      	ldr	r2, [pc, #284]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8001fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 8081 	beq.w	80020ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fcc:	4b42      	ldr	r3, [pc, #264]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d061      	beq.n	800209c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d146      	bne.n	800206e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe0:	4b3f      	ldr	r3, [pc, #252]	; (80020e0 <HAL_RCC_OscConfig+0x4fc>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe6:	f7ff fb23 	bl	8001630 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fee:	f7ff fb1f 	bl	8001630 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e067      	b.n	80020d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002000:	4b35      	ldr	r3, [pc, #212]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002014:	d108      	bne.n	8002028 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002016:	4b30      	ldr	r3, [pc, #192]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	492d      	ldr	r1, [pc, #180]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002028:	4b2b      	ldr	r3, [pc, #172]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a19      	ldr	r1, [r3, #32]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	430b      	orrs	r3, r1
 800203a:	4927      	ldr	r1, [pc, #156]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 800203c:	4313      	orrs	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002040:	4b27      	ldr	r3, [pc, #156]	; (80020e0 <HAL_RCC_OscConfig+0x4fc>)
 8002042:	2201      	movs	r2, #1
 8002044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002046:	f7ff faf3 	bl	8001630 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204e:	f7ff faef 	bl	8001630 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e037      	b.n	80020d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002060:	4b1d      	ldr	r3, [pc, #116]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x46a>
 800206c:	e02f      	b.n	80020ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206e:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <HAL_RCC_OscConfig+0x4fc>)
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7ff fadc 	bl	8001630 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207c:	f7ff fad8 	bl	8001630 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e020      	b.n	80020d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208e:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0x498>
 800209a:	e018      	b.n	80020ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e013      	b.n	80020d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020a8:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <HAL_RCC_OscConfig+0x4f4>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d106      	bne.n	80020ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d001      	beq.n	80020ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40007000 	.word	0x40007000
 80020e0:	42420060 	.word	0x42420060

080020e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0d0      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020f8:	4b6a      	ldr	r3, [pc, #424]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d910      	bls.n	8002128 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b67      	ldr	r3, [pc, #412]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 0207 	bic.w	r2, r3, #7
 800210e:	4965      	ldr	r1, [pc, #404]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b63      	ldr	r3, [pc, #396]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0b8      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d020      	beq.n	8002176 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002140:	4b59      	ldr	r3, [pc, #356]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4a58      	ldr	r2, [pc, #352]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800214a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002158:	4b53      	ldr	r3, [pc, #332]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	4a52      	ldr	r2, [pc, #328]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002162:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002164:	4b50      	ldr	r3, [pc, #320]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	494d      	ldr	r1, [pc, #308]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d040      	beq.n	8002204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d107      	bne.n	800219a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	4b47      	ldr	r3, [pc, #284]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d115      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e07f      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d107      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a2:	4b41      	ldr	r3, [pc, #260]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e073      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b2:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e06b      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021c2:	4b39      	ldr	r3, [pc, #228]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f023 0203 	bic.w	r2, r3, #3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4936      	ldr	r1, [pc, #216]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d4:	f7ff fa2c 	bl	8001630 <HAL_GetTick>
 80021d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021dc:	f7ff fa28 	bl	8001630 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e053      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f2:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 020c 	and.w	r2, r3, #12
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	429a      	cmp	r2, r3
 8002202:	d1eb      	bne.n	80021dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002204:	4b27      	ldr	r3, [pc, #156]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d210      	bcs.n	8002234 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002212:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 0207 	bic.w	r2, r3, #7
 800221a:	4922      	ldr	r1, [pc, #136]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	4313      	orrs	r3, r2
 8002220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002222:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d001      	beq.n	8002234 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e032      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002240:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4916      	ldr	r1, [pc, #88]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	4313      	orrs	r3, r2
 8002250:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d009      	beq.n	8002272 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	490e      	ldr	r1, [pc, #56]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	4313      	orrs	r3, r2
 8002270:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002272:	f000 f821 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8002276:	4602      	mov	r2, r0
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	490a      	ldr	r1, [pc, #40]	; (80022ac <HAL_RCC_ClockConfig+0x1c8>)
 8002284:	5ccb      	ldrb	r3, [r1, r3]
 8002286:	fa22 f303 	lsr.w	r3, r2, r3
 800228a:	4a09      	ldr	r2, [pc, #36]	; (80022b0 <HAL_RCC_ClockConfig+0x1cc>)
 800228c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff f98a 	bl	80015ac <HAL_InitTick>

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40022000 	.word	0x40022000
 80022a8:	40021000 	.word	0x40021000
 80022ac:	08002bc4 	.word	0x08002bc4
 80022b0:	20000060 	.word	0x20000060
 80022b4:	20000064 	.word	0x20000064

080022b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	2300      	movs	r3, #0
 80022cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022d2:	4b1e      	ldr	r3, [pc, #120]	; (800234c <HAL_RCC_GetSysClockFreq+0x94>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d002      	beq.n	80022e8 <HAL_RCC_GetSysClockFreq+0x30>
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d003      	beq.n	80022ee <HAL_RCC_GetSysClockFreq+0x36>
 80022e6:	e027      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ea:	613b      	str	r3, [r7, #16]
      break;
 80022ec:	e027      	b.n	800233e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	0c9b      	lsrs	r3, r3, #18
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	4a17      	ldr	r2, [pc, #92]	; (8002354 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022f8:	5cd3      	ldrb	r3, [r2, r3]
 80022fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d010      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <HAL_RCC_GetSysClockFreq+0x94>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	0c5b      	lsrs	r3, r3, #17
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	4a11      	ldr	r2, [pc, #68]	; (8002358 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002312:	5cd3      	ldrb	r3, [r2, r3]
 8002314:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a0d      	ldr	r2, [pc, #52]	; (8002350 <HAL_RCC_GetSysClockFreq+0x98>)
 800231a:	fb02 f203 	mul.w	r2, r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	fbb2 f3f3 	udiv	r3, r2, r3
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	e004      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a0c      	ldr	r2, [pc, #48]	; (800235c <HAL_RCC_GetSysClockFreq+0xa4>)
 800232c:	fb02 f303 	mul.w	r3, r2, r3
 8002330:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	613b      	str	r3, [r7, #16]
      break;
 8002336:	e002      	b.n	800233e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <HAL_RCC_GetSysClockFreq+0x98>)
 800233a:	613b      	str	r3, [r7, #16]
      break;
 800233c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800233e:	693b      	ldr	r3, [r7, #16]
}
 8002340:	4618      	mov	r0, r3
 8002342:	371c      	adds	r7, #28
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000
 8002350:	007a1200 	.word	0x007a1200
 8002354:	08002bd4 	.word	0x08002bd4
 8002358:	08002be4 	.word	0x08002be4
 800235c:	003d0900 	.word	0x003d0900

08002360 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002368:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <RCC_Delay+0x34>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <RCC_Delay+0x38>)
 800236e:	fba2 2303 	umull	r2, r3, r2, r3
 8002372:	0a5b      	lsrs	r3, r3, #9
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	fb02 f303 	mul.w	r3, r2, r3
 800237a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800237c:	bf00      	nop
  }
  while (Delay --);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1e5a      	subs	r2, r3, #1
 8002382:	60fa      	str	r2, [r7, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f9      	bne.n	800237c <RCC_Delay+0x1c>
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	20000060 	.word	0x20000060
 8002398:	10624dd3 	.word	0x10624dd3

0800239c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e041      	b.n	8002432 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7fe ffa2 	bl	800130c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3304      	adds	r3, #4
 80023d8:	4619      	mov	r1, r3
 80023da:	4610      	mov	r0, r2
 80023dc:	f000 fa56 	bl	800288c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b01      	cmp	r3, #1
 800244e:	d001      	beq.n	8002454 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e035      	b.n	80024c0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a16      	ldr	r2, [pc, #88]	; (80024cc <HAL_TIM_Base_Start_IT+0x90>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d009      	beq.n	800248a <HAL_TIM_Base_Start_IT+0x4e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247e:	d004      	beq.n	800248a <HAL_TIM_Base_Start_IT+0x4e>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <HAL_TIM_Base_Start_IT+0x94>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d111      	bne.n	80024ae <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b06      	cmp	r3, #6
 800249a:	d010      	beq.n	80024be <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ac:	e007      	b.n	80024be <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0201 	orr.w	r2, r2, #1
 80024bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40012c00 	.word	0x40012c00
 80024d0:	40000400 	.word	0x40000400

080024d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d020      	beq.n	8002538 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d01b      	beq.n	8002538 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0202 	mvn.w	r2, #2
 8002508:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f998 	bl	8002854 <HAL_TIM_IC_CaptureCallback>
 8002524:	e005      	b.n	8002532 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f98b 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f99a 	bl	8002866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b00      	cmp	r3, #0
 8002540:	d020      	beq.n	8002584 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d01b      	beq.n	8002584 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f06f 0204 	mvn.w	r2, #4
 8002554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2202      	movs	r2, #2
 800255a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f972 	bl	8002854 <HAL_TIM_IC_CaptureCallback>
 8002570:	e005      	b.n	800257e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f965 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f974 	bl	8002866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d020      	beq.n	80025d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d01b      	beq.n	80025d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f06f 0208 	mvn.w	r2, #8
 80025a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2204      	movs	r2, #4
 80025a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f94c 	bl	8002854 <HAL_TIM_IC_CaptureCallback>
 80025bc:	e005      	b.n	80025ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f93f 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f94e 	bl	8002866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d020      	beq.n	800261c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d01b      	beq.n	800261c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0210 	mvn.w	r2, #16
 80025ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2208      	movs	r2, #8
 80025f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f926 	bl	8002854 <HAL_TIM_IC_CaptureCallback>
 8002608:	e005      	b.n	8002616 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f919 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f928 	bl	8002866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00c      	beq.n	8002640 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0201 	mvn.w	r2, #1
 8002638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fe fd2c 	bl	8001098 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00c      	beq.n	8002664 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800265c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 fa6f 	bl	8002b42 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00c      	beq.n	8002688 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002674:	2b00      	cmp	r3, #0
 8002676:	d007      	beq.n	8002688 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f8f8 	bl	8002878 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f003 0320 	and.w	r3, r3, #32
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00c      	beq.n	80026ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d007      	beq.n	80026ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f06f 0220 	mvn.w	r2, #32
 80026a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fa42 	bl	8002b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026ac:	bf00      	nop
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_TIM_ConfigClockSource+0x1c>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e0b4      	b.n	800283a <HAL_TIM_ConfigClockSource+0x186>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002708:	d03e      	beq.n	8002788 <HAL_TIM_ConfigClockSource+0xd4>
 800270a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800270e:	f200 8087 	bhi.w	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002716:	f000 8086 	beq.w	8002826 <HAL_TIM_ConfigClockSource+0x172>
 800271a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800271e:	d87f      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002720:	2b70      	cmp	r3, #112	; 0x70
 8002722:	d01a      	beq.n	800275a <HAL_TIM_ConfigClockSource+0xa6>
 8002724:	2b70      	cmp	r3, #112	; 0x70
 8002726:	d87b      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002728:	2b60      	cmp	r3, #96	; 0x60
 800272a:	d050      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0x11a>
 800272c:	2b60      	cmp	r3, #96	; 0x60
 800272e:	d877      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002730:	2b50      	cmp	r3, #80	; 0x50
 8002732:	d03c      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0xfa>
 8002734:	2b50      	cmp	r3, #80	; 0x50
 8002736:	d873      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002738:	2b40      	cmp	r3, #64	; 0x40
 800273a:	d058      	beq.n	80027ee <HAL_TIM_ConfigClockSource+0x13a>
 800273c:	2b40      	cmp	r3, #64	; 0x40
 800273e:	d86f      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002740:	2b30      	cmp	r3, #48	; 0x30
 8002742:	d064      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x15a>
 8002744:	2b30      	cmp	r3, #48	; 0x30
 8002746:	d86b      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002748:	2b20      	cmp	r3, #32
 800274a:	d060      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x15a>
 800274c:	2b20      	cmp	r3, #32
 800274e:	d867      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002750:	2b00      	cmp	r3, #0
 8002752:	d05c      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x15a>
 8002754:	2b10      	cmp	r3, #16
 8002756:	d05a      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x15a>
 8002758:	e062      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6899      	ldr	r1, [r3, #8]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f000 f96a 	bl	8002a42 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800277c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	609a      	str	r2, [r3, #8]
      break;
 8002786:	e04f      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6818      	ldr	r0, [r3, #0]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	6899      	ldr	r1, [r3, #8]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f000 f953 	bl	8002a42 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027aa:	609a      	str	r2, [r3, #8]
      break;
 80027ac:	e03c      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	6859      	ldr	r1, [r3, #4]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	461a      	mov	r2, r3
 80027bc:	f000 f8ca 	bl	8002954 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2150      	movs	r1, #80	; 0x50
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 f921 	bl	8002a0e <TIM_ITRx_SetConfig>
      break;
 80027cc:	e02c      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6859      	ldr	r1, [r3, #4]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	461a      	mov	r2, r3
 80027dc:	f000 f8e8 	bl	80029b0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2160      	movs	r1, #96	; 0x60
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f911 	bl	8002a0e <TIM_ITRx_SetConfig>
      break;
 80027ec:	e01c      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6818      	ldr	r0, [r3, #0]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6859      	ldr	r1, [r3, #4]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	461a      	mov	r2, r3
 80027fc:	f000 f8aa 	bl	8002954 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2140      	movs	r1, #64	; 0x40
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f901 	bl	8002a0e <TIM_ITRx_SetConfig>
      break;
 800280c:	e00c      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4619      	mov	r1, r3
 8002818:	4610      	mov	r0, r2
 800281a:	f000 f8f8 	bl	8002a0e <TIM_ITRx_SetConfig>
      break;
 800281e:	e003      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
      break;
 8002824:	e000      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002826:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002838:	7bfb      	ldrb	r3, [r7, #15]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr
	...

0800288c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a2b      	ldr	r2, [pc, #172]	; (800294c <TIM_Base_SetConfig+0xc0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d007      	beq.n	80028b4 <TIM_Base_SetConfig+0x28>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028aa:	d003      	beq.n	80028b4 <TIM_Base_SetConfig+0x28>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a28      	ldr	r2, [pc, #160]	; (8002950 <TIM_Base_SetConfig+0xc4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d108      	bne.n	80028c6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a20      	ldr	r2, [pc, #128]	; (800294c <TIM_Base_SetConfig+0xc0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d007      	beq.n	80028de <TIM_Base_SetConfig+0x52>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d4:	d003      	beq.n	80028de <TIM_Base_SetConfig+0x52>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a1d      	ldr	r2, [pc, #116]	; (8002950 <TIM_Base_SetConfig+0xc4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d108      	bne.n	80028f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a0d      	ldr	r2, [pc, #52]	; (800294c <TIM_Base_SetConfig+0xc0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d103      	bne.n	8002924 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d005      	beq.n	8002942 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f023 0201 	bic.w	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	611a      	str	r2, [r3, #16]
  }
}
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr
 800294c:	40012c00 	.word	0x40012c00
 8002950:	40000400 	.word	0x40000400

08002954 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	f023 0201 	bic.w	r2, r3, #1
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800297e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f023 030a 	bic.w	r3, r3, #10
 8002990:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4313      	orrs	r3, r2
 8002998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	621a      	str	r2, [r3, #32]
}
 80029a6:	bf00      	nop
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	f023 0210 	bic.w	r2, r3, #16
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	031b      	lsls	r3, r3, #12
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	621a      	str	r2, [r3, #32]
}
 8002a04:	bf00      	nop
 8002a06:	371c      	adds	r7, #28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b085      	sub	sp, #20
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f043 0307 	orr.w	r3, r3, #7
 8002a30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	609a      	str	r2, [r3, #8]
}
 8002a38:	bf00      	nop
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b087      	sub	sp, #28
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
 8002a4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	021a      	lsls	r2, r3, #8
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	431a      	orrs	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	609a      	str	r2, [r3, #8]
}
 8002a76:	bf00      	nop
 8002a78:	371c      	adds	r7, #28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e041      	b.n	8002b1c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002abe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a14      	ldr	r2, [pc, #80]	; (8002b28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d009      	beq.n	8002af0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae4:	d004      	beq.n	8002af0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a10      	ldr	r2, [pc, #64]	; (8002b2c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d10c      	bne.n	8002b0a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002af6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40012c00 	.word	0x40012c00
 8002b2c:	40000400 	.word	0x40000400

08002b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr

08002b42 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <__libc_init_array>:
 8002b54:	b570      	push	{r4, r5, r6, lr}
 8002b56:	2600      	movs	r6, #0
 8002b58:	4d0c      	ldr	r5, [pc, #48]	; (8002b8c <__libc_init_array+0x38>)
 8002b5a:	4c0d      	ldr	r4, [pc, #52]	; (8002b90 <__libc_init_array+0x3c>)
 8002b5c:	1b64      	subs	r4, r4, r5
 8002b5e:	10a4      	asrs	r4, r4, #2
 8002b60:	42a6      	cmp	r6, r4
 8002b62:	d109      	bne.n	8002b78 <__libc_init_array+0x24>
 8002b64:	f000 f822 	bl	8002bac <_init>
 8002b68:	2600      	movs	r6, #0
 8002b6a:	4d0a      	ldr	r5, [pc, #40]	; (8002b94 <__libc_init_array+0x40>)
 8002b6c:	4c0a      	ldr	r4, [pc, #40]	; (8002b98 <__libc_init_array+0x44>)
 8002b6e:	1b64      	subs	r4, r4, r5
 8002b70:	10a4      	asrs	r4, r4, #2
 8002b72:	42a6      	cmp	r6, r4
 8002b74:	d105      	bne.n	8002b82 <__libc_init_array+0x2e>
 8002b76:	bd70      	pop	{r4, r5, r6, pc}
 8002b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b7c:	4798      	blx	r3
 8002b7e:	3601      	adds	r6, #1
 8002b80:	e7ee      	b.n	8002b60 <__libc_init_array+0xc>
 8002b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b86:	4798      	blx	r3
 8002b88:	3601      	adds	r6, #1
 8002b8a:	e7f2      	b.n	8002b72 <__libc_init_array+0x1e>
 8002b8c:	08002be8 	.word	0x08002be8
 8002b90:	08002be8 	.word	0x08002be8
 8002b94:	08002be8 	.word	0x08002be8
 8002b98:	08002bec 	.word	0x08002bec

08002b9c <memset>:
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	4402      	add	r2, r0
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d100      	bne.n	8002ba6 <memset+0xa>
 8002ba4:	4770      	bx	lr
 8002ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8002baa:	e7f9      	b.n	8002ba0 <memset+0x4>

08002bac <_init>:
 8002bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bae:	bf00      	nop
 8002bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb2:	bc08      	pop	{r3}
 8002bb4:	469e      	mov	lr, r3
 8002bb6:	4770      	bx	lr

08002bb8 <_fini>:
 8002bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bba:	bf00      	nop
 8002bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bbe:	bc08      	pop	{r3}
 8002bc0:	469e      	mov	lr, r3
 8002bc2:	4770      	bx	lr
